<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FrozenMap</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 12 Jun 2017 22:14:25 +0800</pubDate>
    <lastBuildDate>Mon, 12 Jun 2017 22:14:25 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>翻译：16/17赛季NBA总决赛第四场赛后采访</title>
        <description>&lt;p&gt;这是&lt;strong&gt;翻译&lt;/strong&gt;系列的一篇文章。素材来自的新闻&lt;a href=&quot;https://www.youtube.com/watch?v=K2ld4KddNYc&quot;&gt;Steve Kerr Postgame Interview | Game 4 | Warriors vs Cavaliers | June 9, 2017 | 2017 NBA Finals&lt;/a&gt;，视频发布于2017年6月9日，是总决赛第四场结束后对科尔的采访。以下是根据视频整理的听力译文。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Q: Steve, did you know that you’ve been called for a technical foul in the first quarter, and did you find out then or you did not know till later?&lt;/p&gt;

    &lt;p&gt;Q: Steve，你知道自己在第一节被吹了个技术犯规吗？&lt;/p&gt;

    &lt;p&gt;SteveKerr: I thought they called it on Draymond. I thought I derserved it, ha… But I thought I heard the announcer said, the […] was on Draymond. So then I thought the second one on Draymond was gonna kick him out. But they explained that the first one was on me.&lt;/p&gt;

    &lt;p&gt;SteveKerr: 我以为第一个技犯是吹给追梦的。(不过)我愿意那次技犯吹在我身上（笑）。。 当追梦被吹了”第二次”技犯以后，我以为他会被驱逐。不过(裁判们)纠正了统计台的错误，第一次技犯是给我的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Q: You said before the game that we’ve got to defend it like crazy. That didn’t seem to happen really(GSW lost 49 pts in the first qtr and CAV made 24 triples in the game). What went wrong there?&lt;/p&gt;

    &lt;p&gt;Q: 你在赛前表示我们要打出疯狂的防守，然而这似乎并没有在比赛中体现出来（骑士第一节得了49分，全场命中24个三分），为什么会这样？发生了什么？&lt;/p&gt;

    &lt;p&gt;SteveKerr: Well, first of all, I’ll give them a ton of credit. They made some tough shots, they made 24 threes. And we knew that we won’t get it to keep them quiet from the three point line the whole series. They made some tough shots. But we were not sharp in defense. It’s always a combination. It’s never one thing. So our defense was not sharp, they made tough shots, they made it run. I thought they played a tremendous game. I think the Biggest thing is that they brought a level of physicality that we didn’t match. And we have to do a better job then.&lt;/p&gt;

    &lt;p&gt;SteveKerr: 首先，骑士的表现值得赞赏。 他们命中了很多高难度的球，全场进了24个三分。我们知道他们的外线不可能沉默一整个系列赛。不过另一方面，我们的防守做得很不好。所以多方面因素造成了这场比赛的结果。我们防守不好，他们打出了现象级的表现。另外，我认为最重要的是，他们打出了身体对抗，而我们并没有。所以我们需要在下一场做得更好。&lt;/p&gt;

    &lt;p&gt;Q: Do you have any feeling that perhaps your team was aware of the history in the building and might have come out a little tentative, or?&lt;/p&gt;

    &lt;p&gt;Q: 球队原来有可能在这场比赛创造历史。你是否觉得队员们因此打得有点畏手畏脚呢？&lt;/p&gt;

    &lt;p&gt;Steve: I dont think there was any concern or thoughts about history. I think it was, we played a desperate team on their home floor. A great team with great players. And they came out and handed to us. Simple as that.&lt;/p&gt;

    &lt;p&gt;Steve: 我不这么认为。我们输球的原因在于，我们在他们的主场打出了令人失望的表现。他们是一支伟大的球队，有着伟大的球员，他们站出来把我们狠狠地揍了一顿，就是这样。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// 我发现字幕里有英文可以参考，所以下面就不再记录英文了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Q: 库里在第一节几乎没得分，我不知道为什么会这样。是对方防得太好了吗？还是其他原因？你如何评价他在进攻端的表现？&lt;/p&gt;

    &lt;p&gt;Steve: 很显然，这个夜晚不属于他。。开局慢热，我们一开始就出现了许多失误，有些是非常随意的失误。你知道，他只是没有（像平常一样）掌控好这些，但有时候确实会发生这种情况。&lt;/p&gt;

    &lt;p&gt;Q: 你们在第三节做了什么，为什么会有那么多的比赛中断，那么多的争吵和混战，那些只会把你们的节奏打乱，你们有意识到这些吗？&lt;/p&gt;

    &lt;p&gt;Steve: 因为这场比赛充满了身体对抗，很明显从比赛一开始就是这样了，（我们）被吹了无数次犯规，比赛中充满了推搡，你需要去处理好这些。（然而）第三节还是无数次停下了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Q: 只经过一天的休息，上一场打了那么久的勒布朗和欧文（这一场却仍然打出了极好的表现）。你现在还认为他们会精疲力尽吗（每一场都打那么长时间，下一场会出现体能不足）？你们还会再回到这儿来（打第6场）吗？&lt;/p&gt;

    &lt;p&gt;Steve: （笑）我只是希望他们会出现体力不支的情况，但是他们今晚似乎一点也不累。他们是现象级的球员，他俩都打出了伟大的表现，打出了令人惊叹的一对一，同时也获得了其他队友的帮助，比如JR和杰弗森，骑士队整体打出了精彩的表现。&lt;/p&gt;

    &lt;p&gt;Q: 在前几场都没打好的情况下，为什么TT能在今晚打出了足以影响比赛的表现？&lt;/p&gt;

    &lt;p&gt;Steve: 他有强大的抢篮板的能力，有很好的身体对抗能力，所以他影响了比赛。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Q: 你们打出了一场情绪化的比赛，你提到了身体对抗，LBJ和KD之间，扎扎，追梦，请问你们是在什么时候到了情绪失控的点呢，是什么造成的呢？&lt;/p&gt;

    &lt;p&gt;Steve: 因为这是总决赛，当然是充满情绪的比赛，而且他们0比3落后，绝对会誓死捍卫主场，所以比赛中有很多冲突和对抗，总决赛就是这样。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Q: 你认为更多的身体对抗对骑士有利吗？&lt;/p&gt;

    &lt;p&gt;Steve: 今晚的确是这样。他们不一定是身体对抗更强的队伍，不过他们从一开始就更具有侵略性并占领了先机，因此他们值得这场胜利。不过这并不意味着第5场不会发生改变，为此我们需要在下一场找回自己，打出自己的节奏，打出防守，抢好篮板，打出更强硬的比赛。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(亮点来了)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Q: Without trying to get you fined or anything, what did you think of the officiating overall and is that something that the players just have to adjust to regardless how they feel they are being officiated?&lt;/p&gt;

    &lt;p&gt;Q: 我并不是想让你被联盟罚款（公开地对裁判判罚尺度进行负面评论会被罚款），但你是否觉得，这场比赛的吹罚存在偏袒？（原文很拐弯抹角地问的）&lt;/p&gt;

    &lt;p&gt;Steve: Nice try…&lt;/p&gt;

    &lt;p&gt;Steve: 问得好。（全场都被科尔机智的回答逗笑了）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Q: 和去年一样，现在又是3-1，然后要回湾区，不过三、四场的赢输球顺序换了一下。再哪些方面，今年和去年的情况是相似的，又有哪些地方是不同的呢？似曾相识的感觉是怎么样的？&lt;/p&gt;

    &lt;p&gt;Steve: 相同的地方，都是3-1（笑）。。去年3-1领先时我们感觉非常好，感觉可以在主场拿下总决赛。所以我们正处于一个关键点，我们需要好好把握机会。去年是去年，今年是今年，我很确信追梦第5场不会被停赛。好吧，也许还是会被禁赛，我也不知道（全场笑）。总之，我们会回到主场，尽力赢取这场比赛。谢谢。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/06/12/2017NBA_Finals_G4_Postgame_Interview.html&quot;&gt;https://jjayyyyyyy.github.io/2017/06/12/2017NBA_Finals_G4_Postgame_Interview.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Mon, 12 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/12/2017NBA_Finals_G4_Postgame_Interview.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/12/2017NBA_Finals_G4_Postgame_Interview.html</guid>
        
        
      </item>
    
      <item>
        <title>wc</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;今天我们要讲的&lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt;不是&lt;em&gt;water closet&lt;/em&gt;，而是&lt;code class=&quot;highlighter-rouge&quot;&gt;linux/unix&lt;/code&gt;里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt;，也就是&lt;strong&gt;word count&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt;是一个统计工具&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;whatis wc
wc &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;		- print newline, word, and byte counts &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;each file
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;它的常见用法如下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat test.cpp | wc -c
1143	&lt;span class=&quot;c&quot;&gt;# test.cpp 的文件大小为 1143 bytes&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat test.cpp | wc -l
73	&lt;span class=&quot;c&quot;&gt;# test.cpp 文件内一共有73行&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -1 | wc -l
63	&lt;span class=&quot;c&quot;&gt;# 当前目录下有63个文件/文件夹. 注意使用 ls -1 (数字1), 这样就ls的每一项输出就会占据一行了&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -1 | grep &lt;span class=&quot;s1&quot;&gt;'^m'&lt;/span&gt; | wc -l
2	&lt;span class=&quot;c&quot;&gt;# 该目录下, 名字以'm'开头的文件/文件夹一共有2个&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.computerhope.com/issues/ch001326.htm&quot;&gt;How to count how many files are in a folder or directory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/3137094/how-to-count-lines-in-a-document&quot;&gt;How to count lines in a document?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/wc&quot;&gt;man: wc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/06/03/wc.html&quot;&gt;https://jjayyyyyyy.github.io/2017/06/03/wc.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Sat, 03 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/06/03/wc.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/03/wc.html</guid>
        
        
      </item>
    
      <item>
        <title>全局负载均衡GSLB学习笔记</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 align=&quot;center&quot;&gt;摘要&lt;/h3&gt;

&lt;p&gt;       &lt;strong&gt;GSLB&lt;/strong&gt; 是 &lt;em&gt;Global Server Load Balance&lt;/em&gt; 的缩写，即全局负载均衡。本文首先介绍了什么是负载均衡 &lt;strong&gt;SLB&lt;/strong&gt; ，以及为什么要使用 &lt;strong&gt;SLB&lt;/strong&gt; 。接着引出全局负载均衡 &lt;strong&gt;GSLB&lt;/strong&gt; 的概念和作用。为此介绍了其基于 &lt;strong&gt;DNS&lt;/strong&gt; 进行解析和分配负载的实现，包括 &lt;strong&gt;DNS&lt;/strong&gt; 的原理简介、应用部署中的基本概念、分配负载的决策条件等内容。以外，本文还简单介绍了通过 &lt;strong&gt;HTTP&lt;/strong&gt; 和 &lt;strong&gt;IP&lt;/strong&gt; 实现 &lt;strong&gt;GSLB&lt;/strong&gt; 的方式，并对三者的优缺点进行了简单对比。最后是本文的参考文献。&lt;/p&gt;

&lt;p&gt;关键词: &lt;strong&gt;GSLB&lt;/strong&gt; , &lt;strong&gt;DNS&lt;/strong&gt;, &lt;strong&gt;CDN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;目录&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#SLB&quot;&gt;1. 负载均衡 SLB&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;1.1 SLB的简介与作用&lt;/li&gt;
      &lt;li&gt;1.2 SLB关键技术&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#GSLB&quot;&gt;2. 全局负载均衡 GSLB&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;2.1 GSLB的简介与作用&lt;/li&gt;
      &lt;li&gt;2.2 DNS原理简介&lt;/li&gt;
      &lt;li&gt;2.3 基于DNS的GSLB&lt;/li&gt;
      &lt;li&gt;2.4 GSLB的其他实现方式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Reference&quot;&gt;3. 参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;SLB&quot; align=&quot;center&quot;&gt;1. 负载均衡 SLB&lt;/h3&gt;

&lt;h4 id=&quot;section-1&quot;&gt;&lt;strong&gt;1.1 负载均衡及其作用&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;负载均衡(Server Load Balance, SLB)，其含义是将负载(工作任务)平衡分散到多个服务器上。&lt;strong&gt;CDN&lt;/strong&gt;是典型的负载均衡集群系统。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图1.1&lt;/em&gt;是负载均衡的示意图。从图中可以看出，负载均衡设备可以在用户请求到达服务器之前将其截获，然后将其分发到合适的后端服务器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;SLB&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是说，客户端发出的请求，首先会到负载均衡设备的IP地址上。因为该IP地址并不负责处理实际的业务，所以通常将该地址称为【虚拟IP】(Virtual IP, &lt;strong&gt;VIP&lt;/strong&gt;)。&lt;/p&gt;

&lt;p&gt;后端真正的业务服务器被称为【真实服务器】(Real Server, &lt;strong&gt;RS&lt;/strong&gt;)，其IP地址被称为【真实IP】(Real IP, &lt;strong&gt;RIP&lt;/strong&gt;)，负责处理业务。&lt;/p&gt;

&lt;p&gt;举个例子，VIP 就像是前台招待，会告诉你办什么事该去哪个房间。而RIP是内部实际办业务的房间号。&lt;/p&gt;

&lt;p&gt;利用负载均衡，很大程度上可以避免单个服务器过载或者闲置，前者会引起服务能力下降，后者则没有充分利用资源。因此，为了达到更好的系统处理能力，需要进行以下两个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在集群前端部署负载均衡设备&lt;/li&gt;
  &lt;li&gt;根据预先配置的均衡策略，在集群中智能分发用户请求&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;&lt;strong&gt;1.2 负载均衡关键技术&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;要做到负载均衡，需要的问题包括但不限于以下几个方面&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;请求的分发&lt;/li&gt;
  &lt;li&gt;会话保持&lt;/li&gt;
  &lt;li&gt;服务健康监测&lt;/li&gt;
  &lt;li&gt;故障隔离&lt;/li&gt;
  &lt;li&gt;自动恢复&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1.2.1 请求分发算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;请求分发算法，可以分为【静态算法】和【动态算法】两大类。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;静态算法&lt;/p&gt;

    &lt;p&gt;静态算法是指按照预先设置好的策略进行分发，而不考虑服务器当前的实际负载状况。&lt;/p&gt;

    &lt;p&gt;这类算法包括轮询、加权轮询、基于源IP或目的IP的&lt;strong&gt;hash&lt;/strong&gt;算法等等，优点是简单快捷。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;动态算法&lt;/p&gt;

    &lt;p&gt;动态算法指的是能够根据当前服务器状况进行分发，包括最小连接，加权最小连接等。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1.2.2 会话保持&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;出于一些业务的特殊要求，有时候需要进行会话保持，以保证一段时间内，某一个用户与系统的交互（会话），只交给同一台服务器处理。&lt;/p&gt;

&lt;p&gt;例如，大多数电商应用需要用户认证，而一次交易需要与服务器多次交互才能完成。这几次交互必须由同一台服务器处理，而不能被分散到不同服务器上。&lt;/p&gt;

&lt;p&gt;会话保持有以下几种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;源IP地址的持续性保持&lt;/li&gt;
  &lt;li&gt;cookie 持续性保持&lt;/li&gt;
  &lt;li&gt;基于HTTP报文头的持续性保持&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1.2.3 服务器健康检测&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了保证服务质量，需要定时进行健康检测。我们可以利用ICMP、TCP、HTTP、FTP等协议进行检测，即主要是在传输层和应用层进行检测。&lt;/p&gt;

&lt;p&gt;应用层的检测颗粒更细，但对系统的要求也比较高，因为需要针对应用层的不同的协议做不同的识别分发机制。应用层检测用的比较多的就是HTTP协议，比如先和集群中的设备建立连接，然后发出请求，如果收到正确应答，则说明HTTP处理正常。&lt;/p&gt;

&lt;p&gt;传输层的检测，主要在于能否建立TCP连接，回响是否正常，等等。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;GSLB&quot; align=&quot;center&quot;&gt;2. 全局负载均衡GSLB&lt;/h3&gt;

&lt;h4 id=&quot;gslb&quot;&gt;&lt;strong&gt;2.1 GSLB的简介与作用&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;GSLB, Global Server Load Balance, 即全局负载均衡。&lt;/p&gt;

&lt;p&gt;由于现实中存在各种不稳定因素，比如某个服务器集群所在的数据中心断电，洪水或者地震造成数据中心瘫痪等等。在一个数据中心内，无论采用怎样的技术，总可能存在一些不可抗因素，导致其瘫痪。所以通常会把服务器分散部署到多个数据中心，以最大程度减小灾害对服务质量产生影响的概率和程度。&lt;/p&gt;

&lt;p&gt;另外，&lt;strong&gt;CDN&lt;/strong&gt;系统总是希望用距离用户最近的设备为其提供服务，这也需要在不同地域部署多个节点。&lt;/p&gt;

&lt;p&gt;GSLB系统就是针对这个问题的。它负责多个CDN节点之间相互协作，将各节点和设备的负载保持在一个有利于提供优质服务的水平。GSLB的负载均衡结果可能直接将用户分配到RS，也可能将用户交付到下一层次的负载均衡系统。&lt;/p&gt;

&lt;p&gt;经过多年发展，已有多种调度机制可实现CDN的全局负载均衡。其中最常用的是基于DNS的GSLB。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;dns&quot;&gt;&lt;strong&gt;2.2 DNS简介&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;2.2.1 DNS工作流程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DNS是一个应用层协议，但它通常被其他的应用层协议使用，以便将主机名(host)解析为IP地址。DNS的工作流程如图2.1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;DNS workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在第4步中,本地DNS服务器(&lt;code class=&quot;highlighter-rouge&quot;&gt;Local DNS, LDNS&lt;/code&gt;)在得到浏览器解析的域名请求后，会采用迭代或递归查询的方式，向DNS 系统中其他远程域名服务器提出查询请求，如图 2.2 所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;iterative query&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;LDNS&lt;/code&gt;中没有关于这个域名的缓存，则首先会去根域名服务器请求解析&lt;code class=&quot;highlighter-rouge&quot;&gt;.root&lt;/code&gt;，收到其返回的&lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt;域的域名服务器列表。LDNS在该列表中选出一个域名服务器，对其发出域名解析请求。&lt;/p&gt;

&lt;p&gt;被请求的&lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt;域的域名会查找&lt;code class=&quot;highlighter-rouge&quot;&gt;CDNbook.com&lt;/code&gt;的权威域名服务器的IP，并将其返回给LDNS。&lt;/p&gt;

&lt;p&gt;由于这个权威域名服务器是&lt;code class=&quot;highlighter-rouge&quot;&gt;CDNbook.com&lt;/code&gt;这个域名授权的，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;LDNS&lt;/code&gt;对权威域名服务器请求后就能得到&lt;code class=&quot;highlighter-rouge&quot;&gt;www.CDNbook.com&lt;/code&gt;的IP地址，并将其返回给客户端。&lt;/p&gt;

&lt;p&gt;另一方面，如果在&lt;code class=&quot;highlighter-rouge&quot;&gt;LDNS&lt;/code&gt;上有&amp;lt;&lt;code class=&quot;highlighter-rouge&quot;&gt;www.CDNbook.com&lt;/code&gt;—&lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;&amp;gt;的缓存记录，就可以直接把这个结果返回给客户 端，节省了中间的递归查找步骤时间和资源开销。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2.2 DNS记录的类型&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DNS服务器是根据资源记录来对DNS请求进行应答的。其中，最常见的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Internet&lt;/code&gt;类的记录(&lt;code class=&quot;highlighter-rouge&quot;&gt;Class IN&lt;/code&gt;)。&lt;code class=&quot;highlighter-rouge&quot;&gt;Internet&lt;/code&gt;类的记录主要有以下几种类型(&lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;记录&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;记录即地址&lt;code class=&quot;highlighter-rouge&quot;&gt;Address&lt;/code&gt;记录，对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;是域名的&lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;地址。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NS&lt;/code&gt;记录&lt;/p&gt;

    &lt;p&gt;域名服务器&lt;code class=&quot;highlighter-rouge&quot;&gt;Name Server&lt;/code&gt;记录，保存了下一级域名信息的服务器地址。该记录只能设置为域名,不能设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;地址。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;记录&lt;/p&gt;

    &lt;p&gt;规范名称记录&lt;code class=&quot;highlighter-rouge&quot;&gt;Canonical Name for an alias&lt;/code&gt;，也称为别名记录，其&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;是另一个域名。也就是说，将原域名&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;映射到了另一个域名&lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;举个栗子。百度的域名是&lt;code class=&quot;highlighter-rouge&quot;&gt;www.baidu.com&lt;/code&gt;，它的&lt;code class=&quot;highlighter-rouge&quot;&gt;cname&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;www.a.shifen.com&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;那么，我们已经有了一个域名了，为什么还要设置cname呢？假设有&lt;code class=&quot;highlighter-rouge&quot;&gt;www.domain.com&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;mail.domain.com&lt;/code&gt;，其cname都指向&lt;code class=&quot;highlighter-rouge&quot;&gt;host.domain.cdnxxx.com&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;然后某一天，我们的服务器地址(A记录对应的IP地址)可能要变了。由于www和mail都会被引导到&lt;code class=&quot;highlighter-rouge&quot;&gt;www.domain.wscdn.com&lt;/code&gt;，所以这时我们只需修改&lt;code class=&quot;highlighter-rouge&quot;&gt;host.domain.wscdn.com&lt;/code&gt;的A记录，而不必把www和mail的A记录都改一遍。&lt;/p&gt;

    &lt;p&gt;因此cname增加了灵活性，在子域多的时候更为明显，相当于进行了批量管理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RR&lt;/code&gt;记录&lt;/p&gt;

    &lt;p&gt;资源记录&lt;code class=&quot;highlighter-rouge&quot;&gt;Resource Record&lt;/code&gt;。一个主机名可以对应多个IP地址，在一个DNS应答报文中可能含有多条&lt;code class=&quot;highlighter-rouge&quot;&gt;RR&lt;/code&gt;信息。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;nslookup&lt;/code&gt;来对上述的几个定义进行具体说明。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ nslookup www.baidu.com

# 返回如下响应
Non-authoritative answer:
www.baidu.com canonical name = www.a.shifen.com.
Name: www.a.shifen.com
Address: 112.80.248.74
Name: www.a.shifen.com
Address: 112.80.248.73
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先，&lt;code class=&quot;highlighter-rouge&quot;&gt;www.baidu.com&lt;/code&gt;没有A记录，但是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;cname&lt;/code&gt;被引导到了&lt;code class=&quot;highlighter-rouge&quot;&gt;www.a.shifen.com.&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;其次，&lt;code class=&quot;highlighter-rouge&quot;&gt;www.a.shifen.com&lt;/code&gt;有2条A记录，也就是一个主机对应了2个IP。实际上，如过在不同地区进行DNS请求，则最后得到的这2条A记录也不同。采用某国外VPS进行请求的结果是&lt;code class=&quot;highlighter-rouge&quot;&gt;14.215.177.38&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;14.215.177.37&lt;/code&gt;。这么做是为了将不同地区的用户分配其最近的服务节点，以便快速访问。后面的内容将会解释这一点。&lt;/p&gt;

&lt;h4 id=&quot;dnsgslb&quot;&gt;&lt;strong&gt;2.3 基于DNS的GSLB&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;基于DNS的GSLB，实际上就是把负载均衡设备部署在DNS系统中。在用户发出任何应用连接请求时，首先必须通过DNS系统得到目标服务器的IP。基于DNS的GSLB就是在返回DNS解析结果的时候，进行智能调度，从而将用户分配到最佳(一般是最近的)的服务器。在具体应用中,基于 DNS 解析 来实现 GSLB 有几种方法,下面分别说明。&lt;/p&gt;

&lt;p&gt;//未完待续&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;Reference&quot;&gt;3. 参考文献&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;雷葆华. CDN技术详解[M]. 电子工业出版社, 2014.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jaseywang.me/2012/12/13/cdn-%E7%AE%80%E4%BB%8B%E4%B8%89/#more-3661&quot;&gt;CDN简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/06/dns.html&quot;&gt;DNS原理入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Content_delivery_network&quot;&gt;Content Delivery Network - wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/05/17/GSLB.html&quot;&gt;https://jjayyyyyyy.github.io/2017/05/17/GSLB.html&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;注：本文最初整理于20160908。接下来将会陆续整理一些以前的学习笔记。&lt;/h6&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Wed, 17 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/17/GSLB.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/17/GSLB.html</guid>
        
        
      </item>
    
      <item>
        <title>opposition</title>
        <description>&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;opposition&lt;/code&gt;这个词，以前只知道是&lt;code class=&quot;highlighter-rouge&quot;&gt;反对&lt;/code&gt;的意思。&lt;/p&gt;

&lt;p&gt;今天，偶然发现，它还有一个意思——&lt;code class=&quot;highlighter-rouge&quot;&gt;在野党&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;一直不明白这些政治词汇是什么意思，查了一下，得到以下几条信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E5%9C%A8%E9%87%8E%E9%BB%A8&quot;&gt;维基百科(中文)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在野党，也称为反对党、反对派，也表示政党政治民主国家内未执政的政党，和执政党是互斥的集合，通常亦是反对党。特别是在议会民主国家中，最大在野党常以执政预备（在野）的身份提出和执政党竞争的政策。
在野党有监督在朝执政党的责任，可避免执政党一意孤行或不理会在野党的利益及立场，反映社会不同地域及阶层的意见；民主国家的在野党在野时，如果努力地为国家尽力，获得选民支持，可能将会在下次的选举中，击败原执政党，成为新的执政党。这种情况称为政党轮替，要注意的是这时执政党与在野党的角色会互换，直到下一次的政党轮替发生。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Opposition_(parliamentary)&quot;&gt;维基百科(英文)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Parliamentary opposition is a form of political opposition to a designated government, particularly in a Westminster-based parliamentary system.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/item/%E5%9C%A8%E9%87%8E%E5%85%9A&quot;&gt;度娘百科&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在野党，即多党执政国家（或地区）中没有执掌或没有参与执掌国家行政权力的政党。
在野党是指政党政治国家内未执政的政党，和执政党是互斥的集合，通常也称反对党。
特别是在民主国家中，主要在野党常以执政预备军的身分提出和执政党竞争的政策。 在野党有监督在朝执政党的责任，可避免执政党一意孤行，反应社会不同地域人民的意见；民主国家的在野党在野时，如果努力的为国家尽力，可能将会在下次的选举中，击败原执政党，成为新的执政党。这种情况称为政党轮替，要注意的是这时执政党与在野党的角色会互换，直到下一次政党轮替发生。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://iask.sina.com.cn/b/4816644.html&quot;&gt;新浪爱问&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;“在野党”是对资本主义国家执政党以外的政党的称谓。在内阁制国家，控制议会多数席位的党为执政党，其他党即为在野党，即“不在台上”的意思。在多数资本主义国家，在野党即反对党，而在英国等实行反对党制度的国家，在野党不一定是法定反对党。
所谓在野党，是指另一个或另一些由于在竞选中没有获得多数议席或总统职位，不能组织政府、执掌国家行政权力或没有参加政府内阁的政党。由于没有执掌国家政权，在野党对政府推选的政策不承担任何责任，可以放任自由地指责、抨击政府的各项政策，在各种场合、通过各种手段牵制和监督执政党的活动，要求执政党采取符合他们利益的政策，甚至可以通过法定程序实行倒阁，使自己取而代之。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;这样就大致明白了，为啥opposition会有在野党的意思。因为它是反对/监督执政党的。&lt;/p&gt;

&lt;p&gt;另外，对于什么是&lt;code class=&quot;highlighter-rouge&quot;&gt;在野&lt;/code&gt;，或者什么是&lt;code class=&quot;highlighter-rouge&quot;&gt;野&lt;/code&gt;，在另一条&lt;a href=&quot;http://iask.sina.com.cn/b/1902237.html&quot;&gt;新浪爱问&lt;/a&gt;中，指出了&lt;code class=&quot;highlighter-rouge&quot;&gt;野&lt;/code&gt;就是&lt;code class=&quot;highlighter-rouge&quot;&gt;民间&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在中国，有一句话叫做朝野上下，即执政的在朝，不执政在野。
朝野清晏，国富兵强。——《晋书》中野的意思就是指民间。与朝廷相对。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;a href=&quot;http://baike.baidu.com/item/%E6%9C%9D%E9%87%8E&quot;&gt;度娘百科&lt;/a&gt;中，朝野是这样解释的&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;朝野，原指朝廷和民间，现指政府方面和非政府方面。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E5%9C%A8%E9%87%8E%E9%BB%A8&quot;&gt;维基百科(中文)：在野党&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Opposition_(parliamentary)&quot;&gt;维基百科(英文)：opposition_(parliamentary)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/item/%E5%9C%A8%E9%87%8E%E5%85%9A&quot;&gt;度娘百科：在野党&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://iask.sina.com.cn/b/4816644.html&quot;&gt;新浪爱问：在野党1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://iask.sina.com.cn/b/1902237.html&quot;&gt;新浪爱问：在野党2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/item/%E6%9C%9D%E9%87%8E&quot;&gt;度娘百科：朝野&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/05/16/opposition.html&quot;&gt;https://jjayyyyyyy.github.io/2017/05/16/opposition.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Tue, 16 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/16/opposition.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/16/opposition.html</guid>
        
        
      </item>
    
      <item>
        <title>为什么要把【generic】翻译成【泛型】呢？</title>
        <description>&lt;p&gt;一直以来，我对于 泛型 这个词都是一知半解。当然，我自己比较懒，也没有仔细去研究过这个词。但是另一方面，我觉得这个翻译也有问题。不知道有多少新手在初次看到这个翻译时和我一样是云里雾里的。&lt;/p&gt;

&lt;p&gt;今天，在cppp上，看到了对 泛型 的进一步解释，我觉得把 generic 翻译成泛型，有点古代文人舞文弄墨的味道。其实把它平实地翻译成【通用的】，就已经很好了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;generic指的是两个方面：这些算法可作用于不同的容器类型，而这些容器又可以容纳多种不同类型的元素。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;也就是说，算法和容器都有通用接口，具有通用性，而不是针对一个容器定义一种操作。&lt;/p&gt;

&lt;p&gt;这样解释多容易理解啊。有些翻译者，总是为了翻译而翻译，如此”信达雅”还不如直接通俗化。&lt;/p&gt;

&lt;p&gt;最后附上有道词典的generic翻译。学好英语是值得的。边学边看即可，没那么吓人。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;generic [dʒi'nerik]

adj.
一般的，普通的；通用的，不专用的；非专用装置的；非特有的
【语言学】全称的；通有的；

n.
通名，通称；通用术语
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/1415354/&quot;&gt;C++ Primer, 4th Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/05/05/generic.html&quot;&gt;https://jjayyyyyyy.github.io/2017/05/05/generic.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Fri, 05 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/05/generic.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/05/generic.html</guid>
        
        
      </item>
    
      <item>
        <title>HTTPS证书，类型及特点</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;1. 简介&lt;/h1&gt;

&lt;p&gt;HTTPS即Hypertext Transfer Protocol Secure。由于其安全层使用的是TLS/SSL，因此HTTPS也可以称为HTTP over TLS或HTTP over SSL。&lt;/p&gt;

&lt;p&gt;“HTTPS证书”又叫“SSL证书”、“SSL安全证书”、“SSL数字证书”，目前应用广泛，发展迅速。&lt;/p&gt;

&lt;p&gt;SSL证书需要向国际公认的证书证书认证机构（简称CA，Certificate Authority）申请。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;https&quot;&gt;2. HTTPS证书分类&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;2.1 按验证等级&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;域名型SSL证书，DVSSL，Domain Validation SSL Certificate&lt;/p&gt;

    &lt;p&gt;信任等级普通，只需验证网站的真实性便可颁发证书保护网站。无需人工审核，快速颁发。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;企业组织型SSL证书，OVSSL，Organization Validation SSL Certificate&lt;/p&gt;

    &lt;p&gt;信任等级强，须要验证企业的身份，审核严格，安全性更高。需要人工审核，证书包含企业认证信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增强扩展型SSL证书，EVSSL，Extended Validation SSL Certificate&lt;/p&gt;

    &lt;p&gt;信任等级最高，一般用于银行证券等金融机构，人工审核，审核严格，颁发之后可以使网站域名在浏览器地址栏变成绿色。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;DVSSL&lt;/th&gt;
      &lt;th&gt;OVSSL&lt;/th&gt;
      &lt;th&gt;EVSSL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;信任等级普通，只需验证网站的真实性便可颁发证书保护网站&lt;/td&gt;
      &lt;td&gt;信任等级强，须要验证企业的身份，审核严格，安全性更高&lt;/td&gt;
      &lt;td&gt;信任等级最高，一般用于银行证券等金融机构&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;无需人工审核，快速颁发&lt;/td&gt;
      &lt;td&gt;需要人工审核，证书包含企业认证信息&lt;/td&gt;
      &lt;td&gt;人工严格审核，颁发之后可以使网站域名在浏览器地址栏变成绿色&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2 按保护域名数量&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;单域名型证书, Single Domain SSL Certificates&lt;/p&gt;

    &lt;p&gt;一张SSL证书保护一个域名，一个网站的安全。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多域名型证书 	Multi Domain SSL Certificates&lt;/p&gt;

    &lt;p&gt;一张SSL证书可以保护多个域名，多个网站的安全，多域型SSL证书。支持任何域名，可以是不同的顶级域名（如：hello.com, tv.com, example.com）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通配符型证书, Wildcard SSL Certificates&lt;/p&gt;

    &lt;p&gt;一张SSL证书可以保护相同主域名下所有的子域名的安全。通配型证书只支持*.domain.com通配符子域名（如：a.hello.com, b.hello.com、c.hello.com）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中，单域名型证书和多域名证书分为三种验证等级：DV, OV, EV。
而通配符型证书只有DV和OV两种。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;单域名型证书&lt;/th&gt;
      &lt;th&gt;多域名型证书&lt;/th&gt;
      &lt;th&gt;通配符型证书&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;一张SSL证书保护一个域名，一个网站的安全&lt;/td&gt;
      &lt;td&gt;一张SSL证书可以保护多个域名，多个网站的安全，多域型SSL证书。支持任何域名，可以是不同的顶级域名&lt;/td&gt;
      &lt;td&gt;一张SSL证书可以保护相同主域名下所有的子域名的安全&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;仅支持1个域名&lt;/td&gt;
      &lt;td&gt;最多支持50个域名&lt;/td&gt;
      &lt;td&gt;不限制子域名数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;可选DV, OV, EV三种等级&lt;/td&gt;
      &lt;td&gt;可选DV, OV, EV三种等级&lt;/td&gt;
      &lt;td&gt;可选DV, OV两种等级&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3.参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/5262561.htm&quot;&gt;baike&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/19578422/answer/114210307&quot;&gt;zhihu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sslzhengshu.com/article/post-36.html&quot;&gt;SSLzhengshu-SD_MD_Wildcard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sslzhengshu.com/article/post-35.html&quot;&gt;SSLzhengshu-DV_OV_EV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.evtrust.com/ssl.html&quot;&gt;EVTrust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/05/04/https_certificates.html&quot;&gt;https://jjayyyyyyy.github.io/2017/05/04/https_certificates.html&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;注：本文最初整理于20161018。接下来将会陆续整理一些以前的学习笔记。&lt;/h6&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Thu, 04 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/04/https_certificates.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/04/https_certificates.html</guid>
        
        
      </item>
    
      <item>
        <title>HTTP与缓存相关的头部信息</title>
        <description>&lt;h1 id=&quot;http-headers&quot;&gt;1. HTTP headers简介&lt;/h1&gt;

&lt;p&gt;HTTP是一个应用层协议，由请求和响应构成。和其他很多数据格式一样，请求和响应由&lt;strong&gt;头部&lt;/strong&gt;和&lt;strong&gt;数据&lt;/strong&gt;组成，&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;常见请求头&lt;/th&gt;
      &lt;th&gt;意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Accept: text/html; image/webp; &lt;em&gt;/&lt;/em&gt;	浏览器可接收的类型&lt;/td&gt;
      &lt;td&gt;Accept-Encoding: gzip,compress 	浏览器可接收的压缩编码类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Modified-Since: Mon, 1 Aug 2016 18:23:51 GMT&lt;/td&gt;
      &lt;td&gt;页面缓存时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cache-Control：max-age=300&lt;/td&gt;
      &lt;td&gt;缓存的最长时间 300s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;常见响应头&lt;/th&gt;
      &lt;th&gt;意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Encoding: gzip&lt;/td&gt;
      &lt;td&gt;服务器发送的压缩编码方式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Length: 80&lt;/td&gt;
      &lt;td&gt;服务器发送显示的字节码长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Type: text/html; charset=UTF-8&lt;/td&gt;
      &lt;td&gt;服务器发送内容的类型和编码类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Last-Modified: Tue, 11 Jul 2000 18:23:51GMT&lt;/td&gt;
      &lt;td&gt;服务器最后一次修改的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date:Mon, 01 Aug 2016 13:38:43 GMT&lt;/td&gt;
      &lt;td&gt;资源起始时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Expires:Mon, 01 Aug 2016 13:38:53 GMT&lt;/td&gt;
      &lt;td&gt;资源过期时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ETag:W/”578303987844e7989822712c1e153fc9”&lt;/td&gt;
      &lt;td&gt;资源实体的标识(唯一标识，类似md5值，文件有修改md5就不一样)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cache-Control: max-age=10&lt;/td&gt;
      &lt;td&gt;缓存时间&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2. 与缓存相关的头部信息&lt;/h2&gt;

&lt;p&gt;在请求静态文件的时候，由于这些文件不经常变化，因此把静态文件储起来是一种优化用户浏览体验的方法，同时也可以释放链路资源，缓解网络压力。&lt;/p&gt;

&lt;p&gt;那么，应当如何确定缓存文件的有效时间呢？对此，我们需要用到HTTP头中的Expires和Cache-Control。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.1 Expires&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当客户端第一次访问一个文件资源的时候，服务端在返回资源内容的同时也返回了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expires: Mon, 1 Aug 2016 22:43:02 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也就是服务端告诉浏览器，先把这个文件缓存起来，在这个过期时间之前，该文件都不会变化了。&lt;/p&gt;

&lt;p&gt;下一次浏览器又要访问这个资源，并且访问的时间在&lt;code class=&quot;highlighter-rouge&quot;&gt;Mon, 1 Aug 2016 22:43:02 GMT&lt;/code&gt;之前，那浏览器就不去服务器那边获取文件了，而是直接从缓存中取文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.2 Cache-Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于Expires给定的是绝对时间，而客户端的系统时间可以由用户任意修改，比如Expires设定的过期时间是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mon, 1 Aug 2016 22:43:02 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在用户把系统时间改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Tue, 2 Aug 2016 22:43:02 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;则缓存会被判为过期（虽然实际上还没到那个时间）。因此在HTTP1.1中引入了Cache-Control，这就是一个相对时间，比如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: max-age=80
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那就是说这份缓存的有效期是80秒，而没有给定过期的绝对时间。&lt;/p&gt;

&lt;p&gt;由于Cache-Control是HTTP1.1中才有的，因此可能会有Expires和Cache-Control同时出现的情况，这时以Cache-Control为准。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2 Last-Modified / If-Modified-Since&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在有另外一个问题，服务端有个文件可能会更新，因此希望客户端时不时过来问一下这个文件是否过期。&lt;/p&gt;

&lt;p&gt;如果没有过期，服务端不返回数据给浏览器，只返回304状态码，告诉浏览器目前的缓存还没有过期，然后浏览器继续使用已有缓存。&lt;/p&gt;

&lt;p&gt;这个就叫做条件请求。这里就要用到以下两个头部信息&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Last-Modified	(response header)&lt;/li&gt;
  &lt;li&gt;If-Modified-Since	(request header)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上一小节的响应头和请求头为例，浏览器第一次请求资源的时候，服务端返回资源内容，同时也返回了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Last-Modified:Mon, 01 Aug 2016 13:48:44 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也就是服务端在告诉客户端这个文件在服务器上的最后修改时间。&lt;/p&gt;

&lt;p&gt;浏览器第二次访问的时候（假设这里没有设置Expires或者Cache-Control）。那么浏览器在访问资源的时候会在请求头上带上&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If-Modified-Since:Mon, 01 Aug 2016 13:48:44 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;服务端收到后对比目前文件的最后修改时间和该请求头的信息，如果没有修改，那就直接返回304给浏览器，而不返回实际资源。如果有变化了，就返回200，并且带上新的资源内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.3 Etag / If-None-Match&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;条件请求还有另外一种方法——打标签，也就是使用Etag。&lt;/p&gt;

&lt;p&gt;道理和上一小节类似：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一次拿到资源的时候，服务器的响应头中包含了Etag，用来作为时间标签&lt;/li&gt;
  &lt;li&gt;下一次浏览器再次请求资源的时候会把原来的Etag标签带上（在请求头中变成了If-None-Match）作为校验标准，&lt;/li&gt;
  &lt;li&gt;若这个文件如果发生了改变，则Etag也会改变。&lt;/li&gt;
  &lt;li&gt;服务器对比浏览器请求头中的的If-None-Match：
    &lt;ul&gt;
      &lt;li&gt;如果相同就返回304，而不返回实际资源&lt;/li&gt;
      &lt;li&gt;如果不同，就返回200和新的资源。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于Etag需要通过服务器计算得出，每次都进行计算需要额外的开销，有时候这也是一种负担。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 实例&lt;/h2&gt;

&lt;p&gt;下面以第2篇参考资料为例。在chrome中打开开发者工具的Network，然后进入&lt;a href=&quot;http://www.cnblogs.com/yjf512/p/3244882.html&quot;&gt;http://www.cnblogs.com/yjf512/p/3244882.html&lt;/a&gt;，选择名为&lt;code class=&quot;highlighter-rouge&quot;&gt;3244882.html&lt;/code&gt;的文件，可以看到其Response Headers中有如下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control:private, max-age=10
Connection:keep-alive
Content-Encoding:gzip
Content-Type:text/html; charset=utf-8
Date:Mon, 01 Aug 2016 13:48:44 GMT
Expires:Mon, 01 Aug 2016 13:48:54 GMT
Last-Modified:Mon, 01 Aug 2016 13:48:44 GMT
Transfer-Encoding:chunked
Vary:Accept-Encoding
X-UA-Compatible:IE=10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第1行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control:private, max-age=10&lt;/code&gt;，表示有效时间为10s，且其优先级高于&lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt;。响应头中出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;，其作用是通知浏览器只针对单个用户进行缓存，且可以具体指定某个字段，如&lt;code class=&quot;highlighter-rouge&quot;&gt;private–&quot;username&quot;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;第2行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Keep-Alive&lt;/code&gt;功能使客户端到服务器端的连接持续有效。当出现对服务器的后继请求时，&lt;code class=&quot;highlighter-rouge&quot;&gt;Keep-Alive&lt;/code&gt;功能避免了重新建立连接，即认为之前的连接还是有效的。&lt;/p&gt;

&lt;p&gt;第3行表示响应的压缩方式。压缩后再传输可以提高效率。&lt;/p&gt;

&lt;p&gt;第4行表示响应的文件类型和字符编码方式。&lt;/p&gt;

&lt;p&gt;第5行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;表示生成文件的绝对时间。&lt;/p&gt;

&lt;p&gt;第6行&lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt;表示文件过期的绝对时间。同时上面也提到了，其优先级低于&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;第7行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt;是服务器告诉浏览器该文件的最后修改时间。&lt;/p&gt;

&lt;p&gt;综上可以看出，该页面的缓存有效时间是10秒。如果不清空缓存，在2016.08.01的13:48:44~13:48:54这个时间段中再次访问服务器，则不会再得到新的页面，而是直接呈现本地缓存。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;4.参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zhsh87/article/details/8186753&quot;&gt;HTTP缓存相关的概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/yjf512/p/3244882.html&quot;&gt;HTTP缓存相关头&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/05/01/http_headers.html&quot;&gt;https://jjayyyyyyy.github.io/2017/05/01/http_headers.html&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;注：本文最初整理于20160801。接下来将会陆续整理一些以前的学习笔记。&lt;/h6&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/10746113/&quot;&gt;HTTP权威指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/01/HTTP_headers.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/01/HTTP_headers.html</guid>
        
        
      </item>
    
      <item>
        <title>HSTS学习笔记</title>
        <description>&lt;h3 align=&quot;center&quot;&gt;摘要&lt;/h3&gt;

&lt;p&gt;       本文首先介绍SSL剥离攻击的危害，接着以此为背景引出其防御方法HSTS(HTTP Strict Transport Security)，并对其概念、原理、作用及优缺点进行了介绍，继而简述其配置方法，并进行了初步测试。最后是本文的参考文献。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键词:&lt;/strong&gt; HSTS，SSL剥离，网络安全&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/04/27/HSTS.html&quot;&gt;https://jjayyyyyyy.github.io/2017/04/27/HSTS.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssl&quot;&gt;1.SSL剥离攻击&lt;/h2&gt;

&lt;p&gt;1.1 引言&lt;/p&gt;

&lt;p&gt;随着互联网的发展，网络安全问题也越来越受到重视，因为一旦信息被盗取或篡改，就有可能给自身带来很严重的损失。SSL剥离就是一种攻击手段，可以窃取、修改传输信息。&lt;/p&gt;

&lt;p&gt;1.2 什么是SSL剥离攻击&lt;/p&gt;

&lt;p&gt;SSL剥离来自SSL Strip，这个名字初看非常高深，而实际中也会引发很多的安全问题。那么什么是SSL剥离？它有什么危害呢？其实SSL剥离就是将HTTPS连接降级到HTTP连接，从而截获用户的传输内容。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://www.aqniu.com/wp-content/uploads/2014/06/SSLStripping.png&quot; alt=&quot;SSL_Strip&quot; width=&quot;400&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1.3 SSL剥离攻击的危害&lt;/p&gt;

&lt;p&gt;SSL剥离攻击其实是中间人攻击的一种，顾名思义，就是指攻击者插入到原本直接通信的双方，让双方以为还在直接跟对方通讯，但实际上双方的通信对方已变成了中间人，信息已经是被中间人获取或篡改。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/HSTS_man_in_the_middle_attack.png&quot; alt=&quot;man in the middle attack&quot; width=&quot;360&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;举例来说，比如小明和小红上课传纸条，但是纸条每次都要经过小王，然后小王就可以把纸条拆开来看看里面写了啥，也就是信息被中间人获取了。如果小王从中作梗，还可以修改小纸条的内容，这样小红收到以后还以为是小明写的，其实只是中间传输的时候内容被修改了。&lt;/p&gt;

&lt;p&gt;而实际发生在网络上的情况是这样的：首先，越来越多的网站为了安全考虑开始使用HTTPS，它使用的是 443 端口进行数据传输，而原来的HTTP的端口是80。但是现在的访问机制存在一个漏洞，也就是允许用户一开始使用HTTP进行请求。&lt;/p&gt;

&lt;p&gt;正常情况下，如果用户进行HTTP请求，比如http://www.taobao.com，或者习惯性地直接在地址栏输入taobao.com，这个请求到服务器之后，服务器返回一个302进行重定向，让浏览器用加密的方式去访问https://www.taobao.com，重新发起443端口的请求。从中可以看到，第一次去服务器的连接实际上是不安全的HTTP，第二次去的时候才是安全的HTTPS。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://www.barretlee.com/blogimgs/2015/10/20151004_d1771371.jpg&quot; alt=&quot;http&quot; width=&quot;480&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;这种机制就让攻击者有了可趁之机，进行SSL剥离攻击，也就是在第一次80请求的地方做手脚。攻击者首先劫持用户的80端口，当用户向目标页发起请求时，劫持者模拟正常的HTTPS请求向源服务器获取数据，然后通过80端口返回给用户。也就是下图的过程：&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://www.barretlee.com/blogimgs/2015/10/20151004_f70b86fd.jpg&quot; alt=&quot;strip&quot; width=&quot;400&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;由于HTTP是明文的，上面的这个过程也就相当于：你先把银行卡帐号密码用大家都看得懂的文字给我，然后我去银行拿钱。也就是你与我之间是没有加密的，我与银行之间是加密的，但是因为我有帐号密码，所以我知道如何解密，照样可以拿到钱。当然拿到钱以后，我可以把钱给你，也可以顺便在里面夹杂一些广告，当然也可以拿了钱直接逃之夭夭。&lt;/p&gt;

&lt;p&gt;因此如果是与钱相关的帐号密码信息被攻击者拿到了，可不只是小红与小明之间产生误会这么简单了，还可能造成财产损失，因此SSL剥离攻击是相当危险的。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/passsword.jpg&quot; alt=&quot;passsword&quot; width=&quot;360&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;这种攻击方式非常危险，而且又不能为了安全而要求每个用户每次都在地址栏输入完整的&lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt;，因为这样做会严重影响用户体验。那么对于这种危险，我们该如何防范呢？其实很简单，下面将要介绍的HSTS就可以很方便地防御SSL剥离攻击。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hsts&quot;&gt;2.HSTS简介&lt;/h2&gt;

&lt;p&gt;2.1 什么是HSTS&lt;/p&gt;

&lt;p&gt;HSTS(HTTP Strict Transport Security) 是一种Web安全协议，它的作用是在本地强制客户端（如浏览器）使用HTTPS与服务器创建连接。服务器开启HSTS的方法是，当客户端通过HTTPS发出请求时，在服务器返回的超文本传输协议响应头中包含STS(Strict-Transport-Security)字段。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/secure_your_website_with_hsts.jpg&quot; alt=&quot;secure_your_website_with_hsts&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2.2 响应头各个参数的意义&lt;/p&gt;

&lt;p&gt;假设在响应头中有如下STS参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Strict-Transport-Security: max-age=31536000;
includeSubDomains;
preload;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;则各个参数意义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max-age 表示这个STS的有效期，单位是秒；&lt;/li&gt;
  &lt;li&gt;includeSubDomains 是可选项，表示将STS规则应用到这个地址的所有子域名；&lt;/li&gt;
  &lt;li&gt;preload 是可选项，表示使用浏览器预载的HSTS地址列表。
其中，HSTS预载列表preload list由Google维护，Chrome/ Firefox/ Safari等浏览器支持预加载的HSTS，避免第一次访问时无法用HSTS建立HTTPS连接的问题，如果某个网站成功提交了加入preload列表的申请，那么它的地址就会出现在这个列表中。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/ensure_hsts_is_preloaded.png&quot; alt=&quot;ensure_hsts_is_preloaded&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2.3 原理与作用过程&lt;/p&gt;

&lt;p&gt;2.3.1 网址不在preload列表中的情况&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在服务器端设置响应头，添加Strict-Transport-Security，并设置max-age等参数；&lt;/li&gt;
  &lt;li&gt;用户第一次访问时，服务器把含有STS的响应头发给客户端(浏览器)；&lt;/li&gt;
  &lt;li&gt;下次浏览器如果使用HTTP访问该网址，只要max-age未过期，浏览器内部会进行307跳转，直接HTTPS访问服务器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.3.2 网址存在preload列表中的情况&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在服务器端设置响应头，添加Strict-Transport-Security，并设置max-age等参数；&lt;/li&gt;
  &lt;li&gt;浏览器如果使用HTTP访问该网址，只要max-age未过期，浏览器内部会进行307跳转，直接HTTPS访问服务器。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/lock.png&quot; alt=&quot;lock&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;因此，如果使用了HSTS，就能防止第一次80请求出问题，它的做法就是不经过网络而是直接在浏览器内部改写地址和请求方式。对应于之前的例子，就相当于你一开始就拥有了一只神奇的笔，用它写下来的文字只有你和银行才能看得懂，我却看不懂。而我拿着这些文字信息到银行后只能换一个保险柜，保险柜的密码只有你和银行知道，因此我也拿不到里面的钱。因此，HSTS有助于安全性的提升。&lt;/p&gt;

&lt;p&gt;2.4 浏览器支持&lt;/p&gt;

&lt;p&gt;最后，HSTS要起作用首先需要需要浏览器的支持。不过目前主流的浏览器，如Chrome, Safari, Firefox, IE, Opera，其最新版本均已支持HSTS。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/browsers.jpg&quot; alt=&quot;browsers&quot; width=&quot;360&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;3.能解决什么问题&lt;/h2&gt;

&lt;p&gt;3.1 三个威胁&lt;/p&gt;

&lt;p&gt;HSTS主要针对以下三个威胁：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户书签中的链接或者手动输入的地址是example.com，然后浏览器以HTTP方式访问。这种方式可能遭遇中间人劫持；&lt;/li&gt;
  &lt;li&gt;HTTPS页面的链接无意中包含HTTP，这个HTTP页面可能被中间人劫持；&lt;/li&gt;
  &lt;li&gt;在传输过程中可能会被拦截流量，而浏览器显示证书错误链接不安全时用户可能点击继续访问不安全的链接。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/12306.jpg&quot; alt=&quot;12306&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3.2 解决方案&lt;/p&gt;

&lt;p&gt;HSTS针对以上三个威胁的解决方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持HSTS的浏览器直接内部重定向，用HTTPS取代HTTP访问目标域名；&lt;/li&gt;
  &lt;li&gt;第二点同上；&lt;/li&gt;
  &lt;li&gt;在证书错误的时候没有目标页的链接入口，用户不能忽略浏览器警告继续访问网站。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/no_unsecure_page_is_allowed.png&quot; alt=&quot;no_unsecure_page_is_allowed&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;如前所述，若没有使用HSTS，虽然会出现安全警告，但是仍可选择继续不安全的连接。而如果使用了HSTS，则无法继续不安全的链接。&lt;/p&gt;

&lt;p&gt;3.3 节省时间和资源&lt;/p&gt;

&lt;p&gt;利用HSTS，还可以节省一次302/301跳转请求。如果浏览器已经记住对应网址的HSTS规则，每次对其进行http访问时，都会在浏览器内部直接307跳转到https，不用先80到服务器然后再被告知443端口访问，节省资源和时间。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/307.bmp&quot; alt=&quot;307&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;最后，使用HSTS的优点是可以强制客户端使用HTTPS访问页面，避免中间人劫持；免去一次302/301的跳转请求，直接进行HTTPS连接，节省时间和资源。更加安全和高效。但是它也存在一些缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无法处理纯IP的请求，也即如果在地址栏输入http://2.2.2.2，即便响应头中设置了STS，浏览器也不会处理。（参考资料中未设置，但是用百度的IP不会建立HTTPS连接，而如果用淘宝网首页的IP会显示501错误）；&lt;/li&gt;
  &lt;li&gt;因为HSTS只能在80和443端口之间切换，如果服务是8080端口，即便设置了STS，也无效；&lt;/li&gt;
  &lt;li&gt;如果浏览器证书错误，一般情况会提醒存在安全风险，然是依然给一个链接进入目标页，而 HSTS 则没有目标页入口，所以一旦证书配置错误，会导致根本无法访问，用户体验很差；&lt;/li&gt;
  &lt;li&gt;如果服务器的HTTPS没有配置好就开启了STS的响应头，并且还设置了很长的过期时间，那么在你服务器HTTPS配置好之前，用户都是没办法连接到你的服务器的，除非max-age过期了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;4.配置服务器&lt;/h2&gt;

&lt;p&gt;4.1 Apache2&lt;/p&gt;

&lt;p&gt;修改配置文件，如&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/sites-enabled/websites.conf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/httpd.conf&lt;/code&gt;，在VirtualHost中增加以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vi&quot;&gt;# Optionally load the headers module: 
LoadModule headers_module modules/mod_headers.so
&amp;lt;VirtualHost 67.89.123.45:443&amp;gt;
	Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubdomains;&quot;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.2 Lighttpd&lt;/p&gt;

&lt;p&gt;修改配置文件，如/etc/lighttpd/lighttpd.conf，然后重启Lighttpd即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vi&quot;&gt;server.modules += ( &quot;mod_setenv&quot; ) 
$HTTP[&quot;scheme&quot;] == &quot;https&quot; { 
	setenv.add-response-header = (&quot;Strict-Transport-Security&quot; =&amp;gt; &quot;max-age=63072000; includeSubdomains; &quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.3 Nginx&lt;/p&gt;

&lt;p&gt;将以下内容添加到https的配置文件中即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; &quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;5.初步测试&lt;/h2&gt;

&lt;p&gt;利用Chrome的开发者工具，分别对&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.taobao.com&lt;/li&gt;
  &lt;li&gt;http://www.baidu.com&lt;/li&gt;
  &lt;li&gt;http://www.douban.com&lt;/li&gt;
  &lt;li&gt;http://www.google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进行实验，可以发现taobao, douban, google已经开始使用HSTS，而且在输入上面网址的时候可以看到307状态码，在浏览器内部切换到https进行访问。而访问http://www.baidu.com的时候，还是只有302，多次访问仍旧如此，说明百度首页还没有使用HSTS，仍是先80端口访问然后服务器再返回302告诉浏览器要用443端口进行https访问。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/secured_with_hsts.gif&quot; alt=&quot;secured_with_hsts&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;6.参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&quot;&gt;wikipedia_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.barretlee.com/blog/2015/10/22/hsts-intro/&quot;&gt;barretlee_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security&quot;&gt;OWASP_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security&quot;&gt;MDN_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aqniu.com/threat-alert/3425.html&quot;&gt;SSL strip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx&quot;&gt;HTTP Strict Transport Security (HSTS) and NGINX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raymii.org/s/tutorials/HTTP_Strict_Transport_Security_for_Apache_NGINX_and_Lighttpd.html&quot;&gt;HTTP Strict Transport Security for Apache, NGINX and Lighttpd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;chrome://net-internals/#hsts&quot;&gt;chrome://net-internals/#hsts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6797&quot;&gt;HSTS RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;注：本文最初整理于20160802。接下来将会陆续整理一些以前的学习笔记。&lt;/h6&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/27/HSTS.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/27/HSTS.html</guid>
        
        
      </item>
    
      <item>
        <title>文字的颜色</title>
        <description>&lt;p&gt;本文代码在这里 &lt;a href=&quot;https://github.com/jJayyyyyyy/bmp_maker&quot;&gt;https://github.com/jJayyyyyyy/bmp_maker&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1.序&lt;/h2&gt;

&lt;p&gt;无论什么语言，每一段文字都有自己的颜色。比如程序员最熟悉的&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world.&lt;/code&gt;，它的颜色是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/bmp_maker/master/assets/expanded_demo1.bmp&quot; alt=&quot;hello world&quot; /&gt;&lt;/p&gt;

&lt;p&gt;又比如&lt;a href=&quot;https://github.com/jJayyyyyyy/bmp_maker/blob/master/assets/ym_face.txt&quot;&gt;这个&lt;/a&gt;由字符搭出来的姚明脸，其颜色是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/bmp_maker/master/assets/expanded_demo2.bmp&quot; alt=&quot;ym face&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是不是很神奇lol&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2.原理&lt;/h2&gt;

&lt;p&gt;创意来自&lt;a href=&quot;https://www.zhihu.com/question/51314788/answer/155265634&quot;&gt;KaitoHH&lt;/a&gt;，这哥们写了一个&lt;a href=&quot;https://github.com/KaitoHH/AnyCodeToBmp&quot;&gt;AnyCodeToBmp&lt;/a&gt;，根据名字可以看出，这是一个把代码变成BMP图像的工具。&lt;/p&gt;

&lt;p&gt;我们知道，在计算机中可以有很多种方式来表示颜色（如本文用到的&lt;code class=&quot;highlighter-rouge&quot;&gt;RGB&lt;/code&gt;颜色空间），也有很多种图像格式（如JPEG, PNG, 本文用到的是BMP格式）。如果用文本编辑器打开一张图片，可以看到里面是一连串的十六进制的数字，这就是图片在计算机里保存的形式。当我们换用&lt;code class=&quot;highlighter-rouge&quot;&gt;画图&lt;/code&gt;或者其他软件打开它，就相当于把这些数字解码，还原成图片。&lt;/p&gt;

&lt;p&gt;因此，我们要做的就是把代码文字当成了RGB颜色，然后在文件开头写上必要的信息，将该文件标识为BMP图像，让看图软件能够识别并呈现我们的“图片”。&lt;/p&gt;

&lt;p&gt;更为神奇的是，如果我们用文本编辑器打开这些“图片”，除了开头的乱码，剩下的就是我们原来写入的文字！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KaitoHH/AnyCodeToBmp&quot;&gt;KaitoHH&lt;/a&gt;的工具是用C写的，既然知道了原理，我们不妨用Python来重写一遍。值得注意的是，C可以很方便的操作底层的bit啊byte啊，而Python本来不是干这个的，所以我们不必局限于原来的实现方法，参考原理和思路即可。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;3.实现&lt;/h2&gt;

&lt;p&gt;BMP图像可以简单地由两部分组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件头，&lt;code class=&quot;highlighter-rouge&quot;&gt;Headers(54bytes)&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;BMP Header(14 bytes)&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;DIB(40 bytes)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;图片数据，&lt;code class=&quot;highlighter-rouge&quot;&gt;Pixel Array&lt;/code&gt;, 也即&lt;code class=&quot;highlighter-rouge&quot;&gt;Bitmap Data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的对应关系可以查看&lt;a href=&quot;https://en.wikipedia.org/wiki/BMP_file_format&quot;&gt;wikipedia: BMP file format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;我们需要在文件头中写入以下信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件总大小&lt;code class=&quot;highlighter-rouge&quot;&gt;total_size&lt;/code&gt;，对应的Offset是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x02&lt;/code&gt;，长度4字节&lt;/li&gt;
  &lt;li&gt;图片宽度&lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;，对应Offset是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x12&lt;/code&gt;，长度4字节&lt;/li&gt;
  &lt;li&gt;图片高度&lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;，对应Offset是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x16&lt;/code&gt;，长度4字节&lt;/li&gt;
  &lt;li&gt;图片数据大小&lt;code class=&quot;highlighter-rouge&quot;&gt;raw_size&lt;/code&gt;，对应&lt;code class=&quot;highlighter-rouge&quot;&gt;0x22&lt;/code&gt;，长度4字节&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些也就是可变的部分，其他地方写入固定数值即可，注意BMP采用&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;小端序(little-endian)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后将编码后的文字写到文件头后面，就可以得到计算机能够识别的BMP图像了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;4.实例&lt;/h2&gt;

&lt;p&gt;看完3是不是觉得还有点抽象？没关系，下面我们来看一个实例。简单起见，我们来“画出”一开始的&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world.&lt;/code&gt;（注意，这段字符串长度为&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;首先，用十六进制打开图像后，我们将看到以下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;424d 4200 0000 0000 0000 3600 0000 2800
0000 0400 0000 0100 0000 0100 1800 0000
0000 0c00 0000 0000 0000 0000 0000 0000
0000 0000 0000 6865 6c6c 6f20 776f 726c
642e 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后我们来分段说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;424d		#固定，用ascii表示的&quot;BM&quot;
4200 0000	#total_size, 0x42 = 66 = 54 + 12(字符串长度10)
0000		#固定
0000		#固定
3600 0000	#固定, header_size, 0x36 = 54 = 14 + 40
2800 0000	#DIB_size, 0x28 = 40
0400 0000	#width, 0x04 = 4, 注意width取4的整数倍
0100 0000	#height, 0x01 = 1
0100		#固定
1800		#固定
0000 0000	#固定
0c00 0000	#raw_size, 0x0c = 12
0000 0000	#固定
0000 0000	#固定
0000 0000	#固定
0000 0000	#固定
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上就是整个&lt;code class=&quot;highlighter-rouge&quot;&gt;Headers&lt;/code&gt;的内容。剩下的就是颜色信息，逐个对应了字符串”hello world.”的ASCII码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6865 6c6c 6f20 776f 726c 642e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样拆解之后，结构是不是清晰了很多呢？如果要画出另外的文字，只需要修改第3节中对应的部分即可。需要注意的是，width应取4的整数倍。而在RGB空间中，每个像素pixel为3个字节（红+蓝+绿，各占一字节）。因此&lt;code class=&quot;highlighter-rouge&quot;&gt;raw_size&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;12&lt;/code&gt;的整数倍，否则需要补齐。本文采用的补齐方法是在末尾添加&lt;code class=&quot;highlighter-rouge&quot;&gt; &lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;5.跋&lt;/h2&gt;

&lt;p&gt;偷偷地告诉你一个秘密，中文博大精深，其色彩亦是绚烂多姿。最后，有一篇文章的颜色是这样的(未放大的图像在&lt;a href=&quot;https://github.com/jJayyyyyyy/bmp_maker/blob/master/assets/demo3.bmp&quot;&gt;这里&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/bmp_maker/master/assets/expanded_demo3.bmp&quot; alt=&quot;guess it&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你能猜出这是哪一篇文章吗-( ゜- ゜)つロ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;BMP means BitMap&lt;/li&gt;
  &lt;li&gt;DIB means Device Independent Bitmap&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KaitoHH/AnyCodeToBmp&quot;&gt;KaitoHH: AnyCodeToBmp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BMP_file_format&quot;&gt;Wikipedia: BMP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.96yx.com/tool/ASC2.htm&quot;&gt;ASCII&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;bytes
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21017698/converting-int-to-bytes-in-python-3&quot;&gt;Stack Overflow: int_to_bytes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#bytes&quot;&gt;Python Docs: bytes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;others
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431918785710e86a1a120ce04925bae155012c7fc71e000&quot;&gt;liaoxuefeng: 字符串和编码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Python_Imaging_Library/Editing_Pixels&quot;&gt;PIL: Editing_Pixels&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000#0&quot;&gt;liaoxuefeng: PIL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.zxjsq.net/&quot;&gt;在线计算器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 10 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/10/bmp_maker.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/10/bmp_maker.html</guid>
        
        
      </item>
    
      <item>
        <title>Lit</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jJayyyyyyy/Lit&quot;&gt;Lit&lt;/a&gt;&lt;/strong&gt;&lt;img alt=&quot;ic_launcher&quot; src=&quot;https://github.com/jJayyyyyyy/Lit/raw/master/assets/ic_launcher.png&quot; width=&quot;24&quot; /&gt;是我的第一个安卓应用。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;起源&lt;/h3&gt;

&lt;p&gt;以前用Python写过一些小脚本，然而只能在电脑上用。身处移动时代，觉着不如造个轮子，把这些功能集成为一个应用，于是&lt;strong&gt;Lit&lt;/strong&gt;就诞生了。&lt;/p&gt;

&lt;p&gt;一开始它还叫做mToolKit，其中m既可以表示my，也有驼峰命名法中，private变量前加m的命名习惯，表示这是一个DIY定制的应用。不过AS提示说APP的名字一般都是开头大写。。。经过一番对宇宙哲学的思考，最后决定改名为&lt;strong&gt;Lit&lt;/strong&gt;，其英文可以解释为燃烧的。另外也取义&lt;code class=&quot;highlighter-rouge&quot;&gt;lite&lt;/code&gt;，表示这是一个轻量级的工具，用尽量少的资源获取需要的信息。同时想要模仿一下递归命名，于是在描述中还中二地加了这么一句&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lit is a Lite Info Toolkit.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-( ゜- ゜)つロ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;布局设计&lt;/h3&gt;

&lt;p&gt;根据AS提供的空工程，初步的布局设计大致是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jJayyyyyyy/Lit/raw/master/assets/lit_sketch_1.png&quot; width=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击每一项会触发相应功能。最后出来的activity_main.xml可以参见&lt;a href=&quot;https://github.com/jJayyyyyyy/Lit&quot;&gt;这里&lt;/a&gt;，不能算是美观，但是作为自用工具，尽量减少额外的性能开销也是我比较看重的。若作为展示作品，倒是可以进一步修改UI。比如下面是一个草图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jJayyyyyyy/Lit/raw/master/assets/lit_sketch_2.png&quot; width=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;天气查询&lt;/p&gt;

    &lt;p&gt;查询某个城市的天气，数据来自&lt;a href=&quot;http://m.weather.com.cn/&quot;&gt;中国天气网&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dict&lt;/p&gt;

    &lt;p&gt;中英互译，数据来自&lt;a href=&quot;http://dict.youdao.com/&quot;&gt;有道词典&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hacker News&lt;/p&gt;

    &lt;p&gt;获取&lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;首页的所有标题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solidot&lt;/p&gt;

    &lt;p&gt;获取&lt;a href=&quot;http://www.solidot.org/&quot;&gt;Solidot&lt;/a&gt;首页的所有标题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Newsflash&lt;/p&gt;

    &lt;p&gt;获取&lt;a href=&quot;http://36kr.com/newsflashes&quot;&gt;36kr Newsflash&lt;/a&gt;首页的所有标题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;知识点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基本布局&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;获取用户输入，包括&lt;code class=&quot;highlighter-rouge&quot;&gt;View.OnClickListener()&lt;/code&gt;之类的事件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java基本语法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayAdapter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AsyncTask&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网络&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Json&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正则表达式&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;其他&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;为避免AsyncTask的许多缺点, 同时不想纠结于Loader的复杂, 直接在manifests里面禁用了横屏（&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于天气查询，在v1.0之后增加了了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Spinner&lt;/code&gt;，以便查询多个城市的天气情况。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从零开始到现在大概3周吧，中间还有很多其他事情。&lt;br /&gt;
潜台词：《Android应用开发：21天从入门到放弃》&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Badge
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://shields.io/&quot;&gt;Shields, make nice badge&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Basics
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.udacity.com/courses/android&quot;&gt;Udacity, Android Basics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.android.com/index.html&quot;&gt;Android Devloper Doc&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://cn-static.udacity.com/nd801/Common_Android_Views_Cheat_Sheet.pdf&quot;&gt;Common_Android_Views_Cheat_Sheet&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://material.io/&quot;&gt;Material Design&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Json
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/android/android_json_parser.htm&quot;&gt;TutorialsPoint, Android JSON Parser&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jsonformatter.curiousconcept.com/&quot;&gt;CuriousConcept, json formatter&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Manifests
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/a/582585/5584850&quot;&gt;Stack Overflow, disable landscpe mode&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Regular Expression
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&quot;&gt;Oracle Docs, Class Pattern&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/java/java_regular_expressions.htm&quot;&gt;TutorialsPoint, Java Regex&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/csr0312/article/details/17016709&quot;&gt;CSDN leesren, Java正则表达式转义&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Release
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3997748/how-can-i-create-a-keystore&quot;&gt;Stack Overflow, create a keystore&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/publish/app-signing.html&quot;&gt;Android Devloper Doc, publish/app-signing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spinner
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0105/2264.html&quot;&gt;泡网, Android Spinner控件详解&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TextView
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11590538/dpi-value-of-default-large-medium-and-small-text-views-android&quot;&gt;Stack Overflow, setTextSize()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/duanweishi/p/4449588.html&quot;&gt;马会东, setTextSize()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;URLEncoding
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html&quot;&gt;Oracle Docs, URLEncoder&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/12/Lit.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/12/Lit.html</guid>
        
        
      </item>
    
  </channel>
</rss>
