<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FrozenMap</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 May 2017 10:19:12 +0800</pubDate>
    <lastBuildDate>Thu, 04 May 2017 10:19:12 +0800</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>HTTPS证书，类型及特点</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;1. 简介&lt;/h1&gt;

&lt;p&gt;HTTPS即Hypertext Transfer Protocol Secure。由于其安全层使用的是TLS/SSL，因此HTTPS也可以称为HTTP over TLS或HTTP over SSL。&lt;/p&gt;

&lt;p&gt;“HTTPS证书”又叫“SSL证书”、“SSL安全证书”、“SSL数字证书”，目前应用广泛，发展迅速。&lt;/p&gt;

&lt;p&gt;SSL证书需要向国际公认的证书证书认证机构（简称CA，Certificate Authority）申请。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;https&quot;&gt;2. HTTPS证书分类&lt;/h1&gt;

&lt;p&gt;2.1 按验证等级&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;域名型SSL证书，DVSSL，Domain Validation SSL Certificate&lt;/p&gt;

    &lt;p&gt;信任等级普通，只需验证网站的真实性便可颁发证书保护网站。无需人工审核，快速颁发。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;企业组织型SSL证书，OVSSL，Organization Validation SSL Certificate&lt;/p&gt;

    &lt;p&gt;信任等级强，须要验证企业的身份，审核严格，安全性更高。需要人工审核，证书包含企业认证信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增强扩展型SSL证书，EVSSL，Extended Validation SSL Certificate&lt;/p&gt;

    &lt;p&gt;信任等级最高，一般用于银行证券等金融机构，人工审核，审核严格，颁发之后可以使网站域名在浏览器地址栏变成绿色。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;DVSSL&lt;/th&gt;
      &lt;th&gt;OVSSL&lt;/th&gt;
      &lt;th&gt;EVSSL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;信任等级普通，只需验证网站的真实性便可颁发证书保护网站&lt;/td&gt;
      &lt;td&gt;信任等级强，须要验证企业的身份，审核严格，安全性更高&lt;/td&gt;
      &lt;td&gt;信任等级最高，一般用于银行证券等金融机构&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;无需人工审核，快速颁发&lt;/td&gt;
      &lt;td&gt;需要人工审核，证书包含企业认证信息&lt;/td&gt;
      &lt;td&gt;人工严格审核，颁发之后可以使网站域名在浏览器地址栏变成绿色&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2.2 按保护域名数量&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;单域名型证书, Single Domain SSL Certificates&lt;/p&gt;

    &lt;p&gt;一张SSL证书保护一个域名，一个网站的安全。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多域名型证书 	Multi Domain SSL Certificates&lt;/p&gt;

    &lt;p&gt;一张SSL证书可以保护多个域名，多个网站的安全，多域型SSL证书。支持任何域名，可以是不同的顶级域名（如：hello.com, tv.com, example.com）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通配符型证书, Wildcard SSL Certificates&lt;/p&gt;

    &lt;p&gt;一张SSL证书可以保护相同主域名下所有的子域名的安全。通配型证书只支持*.domain.com通配符子域名（如：a.hello.com, b.hello.com、c.hello.com）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中，单域名型证书和多域名证书分为三种验证等级：DV, OV, EV。
而通配符型证书只有DV和OV两种。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;单域名型证书&lt;/th&gt;
      &lt;th&gt;多域名型证书&lt;/th&gt;
      &lt;th&gt;通配符型证书&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;一张SSL证书保护一个域名，一个网站的安全&lt;/td&gt;
      &lt;td&gt;一张SSL证书可以保护多个域名，多个网站的安全，多域型SSL证书。支持任何域名，可以是不同的顶级域名&lt;/td&gt;
      &lt;td&gt;一张SSL证书可以保护相同主域名下所有的子域名的安全&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;仅支持1个域名&lt;/td&gt;
      &lt;td&gt;最多支持50个域名&lt;/td&gt;
      &lt;td&gt;不限制子域名数量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;可选DV, OV, EV三种等级&lt;/td&gt;
      &lt;td&gt;可选DV, OV, EV三种等级&lt;/td&gt;
      &lt;td&gt;可选DV, OV两种等级&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3.参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/5262561.htm&quot;&gt;baike&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/19578422/answer/114210307&quot;&gt;zhihu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sslzhengshu.com/article/post-36.html&quot;&gt;SSLzhengshu-SD_MD_Wildcard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sslzhengshu.com/article/post-35.html&quot;&gt;SSLzhengshu-DV_OV_EV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.evtrust.com/ssl.html&quot;&gt;EVTrust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/05/04/https_certificates.html&quot;&gt;https://jjayyyyyyy.github.io/2017/05/04/https_certificates.html&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;注：本文最初整理于20161018。接下来将会陆续整理一些以前的学习笔记。&lt;/h6&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Thu, 04 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/04/https_certificates.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/04/https_certificates.html</guid>
        
        
      </item>
    
      <item>
        <title>HTTP与缓存相关的头部信息</title>
        <description>&lt;h1 id=&quot;http-headers&quot;&gt;1. HTTP headers简介&lt;/h1&gt;

&lt;p&gt;HTTP是一个应用层协议，由请求和响应构成。和其他很多数据格式一样，请求和响应由&lt;strong&gt;头部&lt;/strong&gt;和&lt;strong&gt;数据&lt;/strong&gt;组成，&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;常见请求头&lt;/th&gt;
      &lt;th&gt;意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Accept: text/html; image/webp; &lt;em&gt;/&lt;/em&gt;	浏览器可接收的类型&lt;/td&gt;
      &lt;td&gt;Accept-Encoding: gzip,compress 	浏览器可接收的压缩编码类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;If-Modified-Since: Mon, 1 Aug 2016 18:23:51 GMT&lt;/td&gt;
      &lt;td&gt;页面缓存时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cache-Control：max-age=300&lt;/td&gt;
      &lt;td&gt;缓存的最长时间 300s&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;常见响应头&lt;/th&gt;
      &lt;th&gt;意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Encoding: gzip&lt;/td&gt;
      &lt;td&gt;服务器发送的压缩编码方式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Length: 80&lt;/td&gt;
      &lt;td&gt;服务器发送显示的字节码长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content-Type: text/html; charset=UTF-8&lt;/td&gt;
      &lt;td&gt;服务器发送内容的类型和编码类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Last-Modified: Tue, 11 Jul 2000 18:23:51GMT&lt;/td&gt;
      &lt;td&gt;服务器最后一次修改的时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date:Mon, 01 Aug 2016 13:38:43 GMT&lt;/td&gt;
      &lt;td&gt;资源起始时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Expires:Mon, 01 Aug 2016 13:38:53 GMT&lt;/td&gt;
      &lt;td&gt;资源过期时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ETag:W/”578303987844e7989822712c1e153fc9”&lt;/td&gt;
      &lt;td&gt;资源实体的标识(唯一标识，类似md5值，文件有修改md5就不一样)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cache-Control: max-age=10&lt;/td&gt;
      &lt;td&gt;缓存时间&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2. 与缓存相关的头部信息&lt;/h2&gt;

&lt;p&gt;在请求静态文件的时候，由于这些文件不经常变化，因此把静态文件储起来是一种优化用户浏览体验的方法，同时也可以释放链路资源，缓解网络压力。&lt;/p&gt;

&lt;p&gt;那么，应当如何确定缓存文件的有效时间呢？对此，我们需要用到HTTP头中的Expires和Cache-Control。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.1 Expires&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当客户端第一次访问一个文件资源的时候，服务端在返回资源内容的同时也返回了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expires: Mon, 1 Aug 2016 22:43:02 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也就是服务端告诉浏览器，先把这个文件缓存起来，在这个过期时间之前，该文件都不会变化了。&lt;/p&gt;

&lt;p&gt;下一次浏览器又要访问这个资源，并且访问的时间在&lt;code class=&quot;highlighter-rouge&quot;&gt;Mon, 1 Aug 2016 22:43:02 GMT&lt;/code&gt;之前，那浏览器就不去服务器那边获取文件了，而是直接从缓存中取文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.2 Cache-Control&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于Expires给定的是绝对时间，而客户端的系统时间可以由用户任意修改，比如Expires设定的过期时间是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Mon, 1 Aug 2016 22:43:02 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在用户把系统时间改为&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Tue, 2 Aug 2016 22:43:02 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;则缓存会被判为过期（虽然实际上还没到那个时间）。因此在HTTP1.1中引入了Cache-Control，这就是一个相对时间，比如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: max-age=80
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那就是说这份缓存的有效期是80秒，而没有给定过期的绝对时间。&lt;/p&gt;

&lt;p&gt;由于Cache-Control是HTTP1.1中才有的，因此可能会有Expires和Cache-Control同时出现的情况，这时以Cache-Control为准。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2 Last-Modified / If-Modified-Since&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在有另外一个问题，服务端有个文件可能会更新，因此希望客户端时不时过来问一下这个文件是否过期。&lt;/p&gt;

&lt;p&gt;如果没有过期，服务端不返回数据给浏览器，只返回304状态码，告诉浏览器目前的缓存还没有过期，然后浏览器继续使用已有缓存。&lt;/p&gt;

&lt;p&gt;这个就叫做条件请求。这里就要用到以下两个头部信息&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Last-Modified	(response header)&lt;/li&gt;
  &lt;li&gt;If-Modified-Since	(request header)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上一小节的响应头和请求头为例，浏览器第一次请求资源的时候，服务端返回资源内容，同时也返回了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Last-Modified:Mon, 01 Aug 2016 13:48:44 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也就是服务端在告诉客户端这个文件在服务器上的最后修改时间。&lt;/p&gt;

&lt;p&gt;浏览器第二次访问的时候（假设这里没有设置Expires或者Cache-Control）。那么浏览器在访问资源的时候会在请求头上带上&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If-Modified-Since:Mon, 01 Aug 2016 13:48:44 GMT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;服务端收到后对比目前文件的最后修改时间和该请求头的信息，如果没有修改，那就直接返回304给浏览器，而不返回实际资源。如果有变化了，就返回200，并且带上新的资源内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.3 Etag / If-None-Match&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;条件请求还有另外一种方法——打标签，也就是使用Etag。&lt;/p&gt;

&lt;p&gt;道理和上一小节类似：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一次拿到资源的时候，服务器的响应头中包含了Etag，用来作为时间标签&lt;/li&gt;
  &lt;li&gt;下一次浏览器再次请求资源的时候会把原来的Etag标签带上（在请求头中变成了If-None-Match）作为校验标准，&lt;/li&gt;
  &lt;li&gt;若这个文件如果发生了改变，则Etag也会改变。&lt;/li&gt;
  &lt;li&gt;服务器对比浏览器请求头中的的If-None-Match：
    &lt;ul&gt;
      &lt;li&gt;如果相同就返回304，而不返回实际资源&lt;/li&gt;
      &lt;li&gt;如果不同，就返回200和新的资源。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于Etag需要通过服务器计算得出，每次都进行计算需要额外的开销，有时候这也是一种负担。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 实例&lt;/h2&gt;

&lt;p&gt;下面以第2篇参考资料为例。在chrome中打开开发者工具的Network，然后进入&lt;a href=&quot;http://www.cnblogs.com/yjf512/p/3244882.html&quot;&gt;http://www.cnblogs.com/yjf512/p/3244882.html&lt;/a&gt;，选择名为&lt;code class=&quot;highlighter-rouge&quot;&gt;3244882.html&lt;/code&gt;的文件，可以看到其Response Headers中有如下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control:private, max-age=10
Connection:keep-alive
Content-Encoding:gzip
Content-Type:text/html; charset=utf-8
Date:Mon, 01 Aug 2016 13:48:44 GMT
Expires:Mon, 01 Aug 2016 13:48:54 GMT
Last-Modified:Mon, 01 Aug 2016 13:48:44 GMT
Transfer-Encoding:chunked
Vary:Accept-Encoding
X-UA-Compatible:IE=10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第1行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control:private, max-age=10&lt;/code&gt;，表示有效时间为10s，且其优先级高于&lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt;。响应头中出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;，其作用是通知浏览器只针对单个用户进行缓存，且可以具体指定某个字段，如&lt;code class=&quot;highlighter-rouge&quot;&gt;private–&quot;username&quot;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;第2行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Keep-Alive&lt;/code&gt;功能使客户端到服务器端的连接持续有效。当出现对服务器的后继请求时，&lt;code class=&quot;highlighter-rouge&quot;&gt;Keep-Alive&lt;/code&gt;功能避免了重新建立连接，即认为之前的连接还是有效的。&lt;/p&gt;

&lt;p&gt;第3行表示响应的压缩方式。压缩后再传输可以提高效率。&lt;/p&gt;

&lt;p&gt;第4行表示响应的文件类型和字符编码方式。&lt;/p&gt;

&lt;p&gt;第5行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;表示生成文件的绝对时间。&lt;/p&gt;

&lt;p&gt;第6行&lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt;表示文件过期的绝对时间。同时上面也提到了，其优先级低于&lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;第7行的&lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt;是服务器告诉浏览器该文件的最后修改时间。&lt;/p&gt;

&lt;p&gt;综上可以看出，该页面的缓存有效时间是10秒。如果不清空缓存，在2016.08.01的13:48:44~13:48:54这个时间段中再次访问服务器，则不会再得到新的页面，而是直接呈现本地缓存。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;4.参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/zhsh87/article/details/8186753&quot;&gt;HTTP缓存相关的概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/yjf512/p/3244882.html&quot;&gt;HTTP缓存相关头&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/05/01/http_headers.html&quot;&gt;https://jjayyyyyyy.github.io/2017/05/01/http_headers.html&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;注：本文最初整理于20160801。接下来将会陆续整理一些以前的学习笔记。&lt;/h6&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-3&quot;&gt;相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/10746113/&quot;&gt;HTTP权威指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/01/HTTP_headers.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/01/HTTP_headers.html</guid>
        
        
      </item>
    
      <item>
        <title>HSTS学习笔记</title>
        <description>&lt;h3 align=&quot;center&quot;&gt;摘要&lt;/h3&gt;

&lt;p&gt;       本文首先介绍SSL剥离攻击的危害，接着以此为背景引出其防御方法HSTS(HTTP Strict Transport Security)，并对其概念、原理、作用及优缺点进行了介绍，继而简述其配置方法，并进行了初步测试。最后是本文的参考文献。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键词:&lt;/strong&gt; HSTS，SSL剥离，网络安全&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本文地址：&lt;a href=&quot;https://jjayyyyyyy.github.io/2017/04/27/HSTS.html&quot;&gt;https://jjayyyyyyy.github.io/2017/04/27/HSTS.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ssl&quot;&gt;1.SSL剥离攻击&lt;/h2&gt;

&lt;p&gt;1.1 引言&lt;/p&gt;

&lt;p&gt;随着互联网的发展，网络安全问题也越来越受到重视，因为一旦信息被盗取或篡改，就有可能给自身带来很严重的损失。SSL剥离就是一种攻击手段，可以窃取、修改传输信息。&lt;/p&gt;

&lt;p&gt;1.2 什么是SSL剥离攻击&lt;/p&gt;

&lt;p&gt;SSL剥离来自SSL Strip，这个名字初看非常高深，而实际中也会引发很多的安全问题。那么什么是SSL剥离？它有什么危害呢？其实SSL剥离就是将HTTPS连接降级到HTTP连接，从而截获用户的传输内容。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://www.aqniu.com/wp-content/uploads/2014/06/SSLStripping.png&quot; alt=&quot;SSL_Strip&quot; width=&quot;400&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;1.3 SSL剥离攻击的危害&lt;/p&gt;

&lt;p&gt;SSL剥离攻击其实是中间人攻击的一种，顾名思义，就是指攻击者插入到原本直接通信的双方，让双方以为还在直接跟对方通讯，但实际上双方的通信对方已变成了中间人，信息已经是被中间人获取或篡改。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/HSTS_man_in_the_middle_attack.png&quot; alt=&quot;man in the middle attack&quot; width=&quot;360&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;举例来说，比如小明和小红上课传纸条，但是纸条每次都要经过小王，然后小王就可以把纸条拆开来看看里面写了啥，也就是信息被中间人获取了。如果小王从中作梗，还可以修改小纸条的内容，这样小红收到以后还以为是小明写的，其实只是中间传输的时候内容被修改了。&lt;/p&gt;

&lt;p&gt;而实际发生在网络上的情况是这样的：首先，越来越多的网站为了安全考虑开始使用HTTPS，它使用的是 443 端口进行数据传输，而原来的HTTP的端口是80。但是现在的访问机制存在一个漏洞，也就是允许用户一开始使用HTTP进行请求。&lt;/p&gt;

&lt;p&gt;正常情况下，如果用户进行HTTP请求，比如http://www.taobao.com，或者习惯性地直接在地址栏输入taobao.com，这个请求到服务器之后，服务器返回一个302进行重定向，让浏览器用加密的方式去访问https://www.taobao.com，重新发起443端口的请求。从中可以看到，第一次去服务器的连接实际上是不安全的HTTP，第二次去的时候才是安全的HTTPS。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://www.barretlee.com/blogimgs/2015/10/20151004_d1771371.jpg&quot; alt=&quot;http&quot; width=&quot;480&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;这种机制就让攻击者有了可趁之机，进行SSL剥离攻击，也就是在第一次80请求的地方做手脚。攻击者首先劫持用户的80端口，当用户向目标页发起请求时，劫持者模拟正常的HTTPS请求向源服务器获取数据，然后通过80端口返回给用户。也就是下图的过程：&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;http://www.barretlee.com/blogimgs/2015/10/20151004_f70b86fd.jpg&quot; alt=&quot;strip&quot; width=&quot;400&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;由于HTTP是明文的，上面的这个过程也就相当于：你先把银行卡帐号密码用大家都看得懂的文字给我，然后我去银行拿钱。也就是你与我之间是没有加密的，我与银行之间是加密的，但是因为我有帐号密码，所以我知道如何解密，照样可以拿到钱。当然拿到钱以后，我可以把钱给你，也可以顺便在里面夹杂一些广告，当然也可以拿了钱直接逃之夭夭。&lt;/p&gt;

&lt;p&gt;因此如果是与钱相关的帐号密码信息被攻击者拿到了，可不只是小红与小明之间产生误会这么简单了，还可能造成财产损失，因此SSL剥离攻击是相当危险的。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/passsword.jpg&quot; alt=&quot;passsword&quot; width=&quot;360&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;这种攻击方式非常危险，而且又不能为了安全而要求每个用户每次都在地址栏输入完整的&lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt;，因为这样做会严重影响用户体验。那么对于这种危险，我们该如何防范呢？其实很简单，下面将要介绍的HSTS就可以很方便地防御SSL剥离攻击。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hsts&quot;&gt;2.HSTS简介&lt;/h2&gt;

&lt;p&gt;2.1 什么是HSTS&lt;/p&gt;

&lt;p&gt;HSTS(HTTP Strict Transport Security) 是一种Web安全协议，它的作用是在本地强制客户端（如浏览器）使用HTTPS与服务器创建连接。服务器开启HSTS的方法是，当客户端通过HTTPS发出请求时，在服务器返回的超文本传输协议响应头中包含STS(Strict-Transport-Security)字段。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/secure_your_website_with_hsts.jpg&quot; alt=&quot;secure_your_website_with_hsts&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2.2 响应头各个参数的意义&lt;/p&gt;

&lt;p&gt;假设在响应头中有如下STS参数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Strict-Transport-Security: max-age=31536000;
includeSubDomains;
preload;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;则各个参数意义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max-age 表示这个STS的有效期，单位是秒；&lt;/li&gt;
  &lt;li&gt;includeSubDomains 是可选项，表示将STS规则应用到这个地址的所有子域名；&lt;/li&gt;
  &lt;li&gt;preload 是可选项，表示使用浏览器预载的HSTS地址列表。
其中，HSTS预载列表preload list由Google维护，Chrome/ Firefox/ Safari等浏览器支持预加载的HSTS，避免第一次访问时无法用HSTS建立HTTPS连接的问题，如果某个网站成功提交了加入preload列表的申请，那么它的地址就会出现在这个列表中。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/ensure_hsts_is_preloaded.png&quot; alt=&quot;ensure_hsts_is_preloaded&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2.3 原理与作用过程&lt;/p&gt;

&lt;p&gt;2.3.1 网址不在preload列表中的情况&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在服务器端设置响应头，添加Strict-Transport-Security，并设置max-age等参数；&lt;/li&gt;
  &lt;li&gt;用户第一次访问时，服务器把含有STS的响应头发给客户端(浏览器)；&lt;/li&gt;
  &lt;li&gt;下次浏览器如果使用HTTP访问该网址，只要max-age未过期，浏览器内部会进行307跳转，直接HTTPS访问服务器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.3.2 网址存在preload列表中的情况&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在服务器端设置响应头，添加Strict-Transport-Security，并设置max-age等参数；&lt;/li&gt;
  &lt;li&gt;浏览器如果使用HTTP访问该网址，只要max-age未过期，浏览器内部会进行307跳转，直接HTTPS访问服务器。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/lock.png&quot; alt=&quot;lock&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;因此，如果使用了HSTS，就能防止第一次80请求出问题，它的做法就是不经过网络而是直接在浏览器内部改写地址和请求方式。对应于之前的例子，就相当于你一开始就拥有了一只神奇的笔，用它写下来的文字只有你和银行才能看得懂，我却看不懂。而我拿着这些文字信息到银行后只能换一个保险柜，保险柜的密码只有你和银行知道，因此我也拿不到里面的钱。因此，HSTS有助于安全性的提升。&lt;/p&gt;

&lt;p&gt;2.4 浏览器支持&lt;/p&gt;

&lt;p&gt;最后，HSTS要起作用首先需要需要浏览器的支持。不过目前主流的浏览器，如Chrome, Safari, Firefox, IE, Opera，其最新版本均已支持HSTS。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/browsers.jpg&quot; alt=&quot;browsers&quot; width=&quot;360&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;3.能解决什么问题&lt;/h2&gt;

&lt;p&gt;3.1 三个威胁&lt;/p&gt;

&lt;p&gt;HSTS主要针对以下三个威胁：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户书签中的链接或者手动输入的地址是example.com，然后浏览器以HTTP方式访问。这种方式可能遭遇中间人劫持；&lt;/li&gt;
  &lt;li&gt;HTTPS页面的链接无意中包含HTTP，这个HTTP页面可能被中间人劫持；&lt;/li&gt;
  &lt;li&gt;在传输过程中可能会被拦截流量，而浏览器显示证书错误链接不安全时用户可能点击继续访问不安全的链接。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/12306.jpg&quot; alt=&quot;12306&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3.2 解决方案&lt;/p&gt;

&lt;p&gt;HSTS针对以上三个威胁的解决方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持HSTS的浏览器直接内部重定向，用HTTPS取代HTTP访问目标域名；&lt;/li&gt;
  &lt;li&gt;第二点同上；&lt;/li&gt;
  &lt;li&gt;在证书错误的时候没有目标页的链接入口，用户不能忽略浏览器警告继续访问网站。&lt;/li&gt;
&lt;/ul&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/no_unsecure_page_is_allowed.png&quot; alt=&quot;no_unsecure_page_is_allowed&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;如前所述，若没有使用HSTS，虽然会出现安全警告，但是仍可选择继续不安全的连接。而如果使用了HSTS，则无法继续不安全的链接。&lt;/p&gt;

&lt;p&gt;3.3 节省时间和资源&lt;/p&gt;

&lt;p&gt;利用HSTS，还可以节省一次302/301跳转请求。如果浏览器已经记住对应网址的HSTS规则，每次对其进行http访问时，都会在浏览器内部直接307跳转到https，不用先80到服务器然后再被告知443端口访问，节省资源和时间。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/307.bmp&quot; alt=&quot;307&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;最后，使用HSTS的优点是可以强制客户端使用HTTPS访问页面，避免中间人劫持；免去一次302/301的跳转请求，直接进行HTTPS连接，节省时间和资源。更加安全和高效。但是它也存在一些缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无法处理纯IP的请求，也即如果在地址栏输入http://2.2.2.2，即便响应头中设置了STS，浏览器也不会处理。（参考资料中未设置，但是用百度的IP不会建立HTTPS连接，而如果用淘宝网首页的IP会显示501错误）；&lt;/li&gt;
  &lt;li&gt;因为HSTS只能在80和443端口之间切换，如果服务是8080端口，即便设置了STS，也无效；&lt;/li&gt;
  &lt;li&gt;如果浏览器证书错误，一般情况会提醒存在安全风险，然是依然给一个链接进入目标页，而 HSTS 则没有目标页入口，所以一旦证书配置错误，会导致根本无法访问，用户体验很差；&lt;/li&gt;
  &lt;li&gt;如果服务器的HTTPS没有配置好就开启了STS的响应头，并且还设置了很长的过期时间，那么在你服务器HTTPS配置好之前，用户都是没办法连接到你的服务器的，除非max-age过期了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;4.配置服务器&lt;/h2&gt;

&lt;p&gt;4.1 Apache2&lt;/p&gt;

&lt;p&gt;修改配置文件，如&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/sites-enabled/websites.conf&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/httpd.conf&lt;/code&gt;，在VirtualHost中增加以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vi&quot;&gt;# Optionally load the headers module: 
LoadModule headers_module modules/mod_headers.so
&amp;lt;VirtualHost 67.89.123.45:443&amp;gt;
	Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubdomains;&quot;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.2 Lighttpd&lt;/p&gt;

&lt;p&gt;修改配置文件，如/etc/lighttpd/lighttpd.conf，然后重启Lighttpd即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vi&quot;&gt;server.modules += ( &quot;mod_setenv&quot; ) 
$HTTP[&quot;scheme&quot;] == &quot;https&quot; { 
	setenv.add-response-header = (&quot;Strict-Transport-Security&quot; =&amp;gt; &quot;max-age=63072000; includeSubdomains; &quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.3 Nginx&lt;/p&gt;

&lt;p&gt;将以下内容添加到https的配置文件中即可：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; &quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;5.初步测试&lt;/h2&gt;

&lt;p&gt;利用Chrome的开发者工具，分别对&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.taobao.com&lt;/li&gt;
  &lt;li&gt;http://www.baidu.com&lt;/li&gt;
  &lt;li&gt;http://www.douban.com&lt;/li&gt;
  &lt;li&gt;http://www.google.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进行实验，可以发现taobao, douban, google已经开始使用HSTS，而且在输入上面网址的时候可以看到307状态码，在浏览器内部切换到https进行访问。而访问http://www.baidu.com的时候，还是只有302，多次访问仍旧如此，说明百度首页还没有使用HSTS，仍是先80端口访问然后服务器再返回302告诉浏览器要用443端口进行https访问。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/jjayyyyyyy.github.io/master/assets/post_images/2017-04-27/secured_with_hsts.gif&quot; alt=&quot;secured_with_hsts&quot; width=&quot;480&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;6.参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&quot;&gt;wikipedia_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.barretlee.com/blog/2015/10/22/hsts-intro/&quot;&gt;barretlee_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security&quot;&gt;OWASP_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security&quot;&gt;MDN_HSTS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.aqniu.com/threat-alert/3425.html&quot;&gt;SSL strip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx&quot;&gt;HTTP Strict Transport Security (HSTS) and NGINX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raymii.org/s/tutorials/HTTP_Strict_Transport_Security_for_Apache_NGINX_and_Lighttpd.html&quot;&gt;HTTP Strict Transport Security for Apache, NGINX and Lighttpd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;chrome://net-internals/#hsts&quot;&gt;chrome://net-internals/#hsts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6797&quot;&gt;HSTS RFC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h6&gt;注：本文最初整理于20160802。接下来将会陆续整理一些以前的学习笔记。&lt;/h6&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-4&quot;&gt;相关阅读&lt;/h2&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/27/HSTS.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/27/HSTS.html</guid>
        
        
      </item>
    
      <item>
        <title>文字的颜色</title>
        <description>&lt;p&gt;本文代码在这里 &lt;a href=&quot;https://github.com/jJayyyyyyy/bmp_maker&quot;&gt;https://github.com/jJayyyyyyy/bmp_maker&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1.序&lt;/h2&gt;

&lt;p&gt;无论什么语言，每一段文字都有自己的颜色。比如程序员最熟悉的&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world.&lt;/code&gt;，它的颜色是这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/bmp_maker/master/assets/expanded_demo1.bmp&quot; alt=&quot;hello world&quot; /&gt;&lt;/p&gt;

&lt;p&gt;又比如&lt;a href=&quot;https://github.com/jJayyyyyyy/bmp_maker/blob/master/assets/ym_face.txt&quot;&gt;这个&lt;/a&gt;由字符搭出来的姚明脸，其颜色是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/bmp_maker/master/assets/expanded_demo2.bmp&quot; alt=&quot;ym face&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是不是很神奇lol&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2.原理&lt;/h2&gt;

&lt;p&gt;创意来自&lt;a href=&quot;https://www.zhihu.com/question/51314788/answer/155265634&quot;&gt;KaitoHH&lt;/a&gt;，这哥们写了一个&lt;a href=&quot;https://github.com/KaitoHH/AnyCodeToBmp&quot;&gt;AnyCodeToBmp&lt;/a&gt;，根据名字可以看出，这是一个把代码变成BMP图像的工具。&lt;/p&gt;

&lt;p&gt;我们知道，在计算机中可以有很多种方式来表示颜色（如本文用到的&lt;code class=&quot;highlighter-rouge&quot;&gt;RGB&lt;/code&gt;颜色空间），也有很多种图像格式（如JPEG, PNG, 本文用到的是BMP格式）。如果用文本编辑器打开一张图片，可以看到里面是一连串的十六进制的数字，这就是图片在计算机里保存的形式。当我们换用&lt;code class=&quot;highlighter-rouge&quot;&gt;画图&lt;/code&gt;或者其他软件打开它，就相当于把这些数字解码，还原成图片。&lt;/p&gt;

&lt;p&gt;因此，我们要做的就是把代码文字当成了RGB颜色，然后在文件开头写上必要的信息，将该文件标识为BMP图像，让看图软件能够识别并呈现我们的“图片”。&lt;/p&gt;

&lt;p&gt;更为神奇的是，如果我们用文本编辑器打开这些“图片”，除了开头的乱码，剩下的就是我们原来写入的文字！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KaitoHH/AnyCodeToBmp&quot;&gt;KaitoHH&lt;/a&gt;的工具是用C写的，既然知道了原理，我们不妨用Python来重写一遍。值得注意的是，C可以很方便的操作底层的bit啊byte啊，而Python本来不是干这个的，所以我们不必局限于原来的实现方法，参考原理和思路即可。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;3.实现&lt;/h2&gt;

&lt;p&gt;BMP图像可以简单地由两部分组成：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件头，&lt;code class=&quot;highlighter-rouge&quot;&gt;Headers(54bytes)&lt;/code&gt; = &lt;code class=&quot;highlighter-rouge&quot;&gt;BMP Header(14 bytes)&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;DIB(40 bytes)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;图片数据，&lt;code class=&quot;highlighter-rouge&quot;&gt;Pixel Array&lt;/code&gt;, 也即&lt;code class=&quot;highlighter-rouge&quot;&gt;Bitmap Data&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的对应关系可以查看&lt;a href=&quot;https://en.wikipedia.org/wiki/BMP_file_format&quot;&gt;wikipedia: BMP file format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;我们需要在文件头中写入以下信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件总大小&lt;code class=&quot;highlighter-rouge&quot;&gt;total_size&lt;/code&gt;，对应的Offset是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x02&lt;/code&gt;，长度4字节&lt;/li&gt;
  &lt;li&gt;图片宽度&lt;code class=&quot;highlighter-rouge&quot;&gt;width&lt;/code&gt;，对应Offset是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x12&lt;/code&gt;，长度4字节&lt;/li&gt;
  &lt;li&gt;图片高度&lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt;，对应Offset是&lt;code class=&quot;highlighter-rouge&quot;&gt;0x16&lt;/code&gt;，长度4字节&lt;/li&gt;
  &lt;li&gt;图片数据大小&lt;code class=&quot;highlighter-rouge&quot;&gt;raw_size&lt;/code&gt;，对应&lt;code class=&quot;highlighter-rouge&quot;&gt;0x22&lt;/code&gt;，长度4字节&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些也就是可变的部分，其他地方写入固定数值即可，注意BMP采用&lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;小端序(little-endian)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后将编码后的文字写到文件头后面，就可以得到计算机能够识别的BMP图像了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;4.实例&lt;/h2&gt;

&lt;p&gt;看完3是不是觉得还有点抽象？没关系，下面我们来看一个实例。简单起见，我们来“画出”一开始的&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world.&lt;/code&gt;（注意，这段字符串长度为&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;首先，用十六进制打开图像后，我们将看到以下内容：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;424d 4200 0000 0000 0000 3600 0000 2800
0000 0400 0000 0100 0000 0100 1800 0000
0000 0c00 0000 0000 0000 0000 0000 0000
0000 0000 0000 6865 6c6c 6f20 776f 726c
642e 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后我们来分段说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;424d		#固定，用ascii表示的&quot;BM&quot;
4200 0000	#total_size, 0x42 = 66 = 54 + 12(字符串长度10)
0000		#固定
0000		#固定
3600 0000	#固定, header_size, 0x36 = 54 = 14 + 40
2800 0000	#DIB_size, 0x28 = 40
0400 0000	#width, 0x04 = 4, 注意width取4的整数倍
0100 0000	#height, 0x01 = 1
0100		#固定
1800		#固定
0000 0000	#固定
0c00 0000	#raw_size, 0x0c = 12
0000 0000	#固定
0000 0000	#固定
0000 0000	#固定
0000 0000	#固定
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以上就是整个&lt;code class=&quot;highlighter-rouge&quot;&gt;Headers&lt;/code&gt;的内容。剩下的就是颜色信息，逐个对应了字符串”hello world.”的ASCII码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6865 6c6c 6f20 776f 726c 642e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样拆解之后，结构是不是清晰了很多呢？如果要画出另外的文字，只需要修改第3节中对应的部分即可。需要注意的是，width应取4的整数倍。而在RGB空间中，每个像素pixel为3个字节（红+蓝+绿，各占一字节）。因此&lt;code class=&quot;highlighter-rouge&quot;&gt;raw_size&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;12&lt;/code&gt;的整数倍，否则需要补齐。本文采用的补齐方法是在末尾添加&lt;code class=&quot;highlighter-rouge&quot;&gt; &lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;5.跋&lt;/h2&gt;

&lt;p&gt;偷偷地告诉你一个秘密，中文博大精深，其色彩亦是绚烂多姿。最后，有一篇文章的颜色是这样的(未放大的图像在&lt;a href=&quot;https://github.com/jJayyyyyyy/bmp_maker/blob/master/assets/demo3.bmp&quot;&gt;这里&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jJayyyyyyy/bmp_maker/master/assets/expanded_demo3.bmp&quot; alt=&quot;guess it&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你能猜出这是哪一篇文章吗-( ゜- ゜)つロ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;BMP means BitMap&lt;/li&gt;
  &lt;li&gt;DIB means Device Independent Bitmap&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KaitoHH/AnyCodeToBmp&quot;&gt;KaitoHH: AnyCodeToBmp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/BMP_file_format&quot;&gt;Wikipedia: BMP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.96yx.com/tool/ASC2.htm&quot;&gt;ASCII&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;bytes
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21017698/converting-int-to-bytes-in-python-3&quot;&gt;Stack Overflow: int_to_bytes&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#bytes&quot;&gt;Python Docs: bytes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;others
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431918785710e86a1a120ce04925bae155012c7fc71e000&quot;&gt;liaoxuefeng: 字符串和编码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/Python_Imaging_Library/Editing_Pixels&quot;&gt;PIL: Editing_Pixels&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320027235877860c87af5544f25a8deeb55141d60c5000#0&quot;&gt;liaoxuefeng: PIL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.zxjsq.net/&quot;&gt;在线计算器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 10 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/04/10/bmp_maker.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/10/bmp_maker.html</guid>
        
        
      </item>
    
      <item>
        <title>Lit</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/jJayyyyyyy/Lit&quot;&gt;Lit&lt;/a&gt;&lt;/strong&gt;&lt;img alt=&quot;ic_launcher&quot; src=&quot;https://github.com/jJayyyyyyy/Lit/raw/master/assets/ic_launcher.png&quot; width=&quot;24&quot; /&gt;是我的第一个安卓应用。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;起源&lt;/h3&gt;

&lt;p&gt;以前用Python写过一些小脚本，然而只能在电脑上用。身处移动时代，觉着不如造个轮子，把这些功能集成为一个应用，于是&lt;strong&gt;Lit&lt;/strong&gt;就诞生了。&lt;/p&gt;

&lt;p&gt;一开始它还叫做mToolKit，其中m既可以表示my，也有驼峰命名法中，private变量前加m的命名习惯，表示这是一个DIY定制的应用。不过AS提示说APP的名字一般都是开头大写。。。经过一番对宇宙哲学的思考，最后决定改名为&lt;strong&gt;Lit&lt;/strong&gt;，其英文可以解释为燃烧的。另外也取义&lt;code class=&quot;highlighter-rouge&quot;&gt;lite&lt;/code&gt;，表示这是一个轻量级的工具，用尽量少的资源获取需要的信息。同时想要模仿一下递归命名，于是在描述中还中二地加了这么一句&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lit is a Lite Info Toolkit.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-( ゜- ゜)つロ&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;布局设计&lt;/h3&gt;

&lt;p&gt;根据AS提供的空工程，初步的布局设计大致是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jJayyyyyyy/Lit/raw/master/assets/lit_sketch_1.png&quot; width=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击每一项会触发相应功能。最后出来的activity_main.xml可以参见&lt;a href=&quot;https://github.com/jJayyyyyyy/Lit&quot;&gt;这里&lt;/a&gt;，不能算是美观，但是作为自用工具，尽量减少额外的性能开销也是我比较看重的。若作为展示作品，倒是可以进一步修改UI。比如下面是一个草图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/jJayyyyyyy/Lit/raw/master/assets/lit_sketch_2.png&quot; width=&quot;320&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;天气查询&lt;/p&gt;

    &lt;p&gt;查询某个城市的天气，数据来自&lt;a href=&quot;http://m.weather.com.cn/&quot;&gt;中国天气网&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dict&lt;/p&gt;

    &lt;p&gt;中英互译，数据来自&lt;a href=&quot;http://dict.youdao.com/&quot;&gt;有道词典&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hacker News&lt;/p&gt;

    &lt;p&gt;获取&lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;首页的所有标题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solidot&lt;/p&gt;

    &lt;p&gt;获取&lt;a href=&quot;http://www.solidot.org/&quot;&gt;Solidot&lt;/a&gt;首页的所有标题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Newsflash&lt;/p&gt;

    &lt;p&gt;获取&lt;a href=&quot;http://36kr.com/newsflashes&quot;&gt;36kr Newsflash&lt;/a&gt;首页的所有标题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;知识点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基本布局&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;获取用户输入，包括&lt;code class=&quot;highlighter-rouge&quot;&gt;View.OnClickListener()&lt;/code&gt;之类的事件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Java基本语法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayAdapter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AsyncTask&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网络&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Json&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;正则表达式&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;其他&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;为避免AsyncTask的许多缺点, 同时不想纠结于Loader的复杂, 直接在manifests里面禁用了横屏（&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于天气查询，在v1.0之后增加了了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Spinner&lt;/code&gt;，以便查询多个城市的天气情况。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从零开始到现在大概3周吧，中间还有很多其他事情。&lt;br /&gt;
潜台词：《Android应用开发：21天从入门到放弃》&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-5&quot;&gt;相关阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Badge
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://shields.io/&quot;&gt;Shields, make nice badge&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Basics
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.udacity.com/courses/android&quot;&gt;Udacity, Android Basics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.android.com/index.html&quot;&gt;Android Devloper Doc&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://cn-static.udacity.com/nd801/Common_Android_Views_Cheat_Sheet.pdf&quot;&gt;Common_Android_Views_Cheat_Sheet&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://material.io/&quot;&gt;Material Design&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Json
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/android/android_json_parser.htm&quot;&gt;TutorialsPoint, Android JSON Parser&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://jsonformatter.curiousconcept.com/&quot;&gt;CuriousConcept, json formatter&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Manifests
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/a/582585/5584850&quot;&gt;Stack Overflow, disable landscpe mode&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Regular Expression
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html&quot;&gt;Oracle Docs, Class Pattern&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/java/java_regular_expressions.htm&quot;&gt;TutorialsPoint, Java Regex&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/csr0312/article/details/17016709&quot;&gt;CSDN leesren, Java正则表达式转义&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Release
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3997748/how-can-i-create-a-keystore&quot;&gt;Stack Overflow, create a keystore&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/publish/app-signing.html&quot;&gt;Android Devloper Doc, publish/app-signing&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spinner
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0105/2264.html&quot;&gt;泡网, Android Spinner控件详解&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TextView
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11590538/dpi-value-of-default-large-medium-and-small-text-views-android&quot;&gt;Stack Overflow, setTextSize()&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/duanweishi/p/4449588.html&quot;&gt;马会东, setTextSize()&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;URLEncoding
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html&quot;&gt;Oracle Docs, URLEncoder&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/12/Lit.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/12/Lit.html</guid>
        
        
      </item>
    
      <item>
        <title>PAT Basic 1019</title>
        <description>&lt;p&gt;本题代码可以参考&lt;a href=&quot;https://github.com/jJayyyyyyy/cs/tree/master/OJ/PAT/basic_level/1019_%E6%95%B0%E5%AD%97%E9%BB%91%E6%B4%9E&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpswwwpatestcncontestspat-b-practise1019-1019--20&quot;&gt;&lt;a href=&quot;https://www.patest.cn/contests/pat-b-practise/1019&quot;&gt;原题&lt;/a&gt;： 1019. 数字黑洞 (20)&lt;/h2&gt;

&lt;p&gt;给定任一个各位数字不完全相同的4位正整数，如果我们先把4个数字按非递增排序，再按非递减排序，然后用第1个数字减第2个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的6174，这个神奇的数字也叫Kaprekar常数。&lt;/p&gt;

&lt;p&gt;例如，我们从6767开始，将得到&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
7641 - 1467 = 6174
... ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现给定任意4位正整数，请编写程序演示到达黑洞的过程。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;输入格式&lt;/h3&gt;

&lt;p&gt;输入给出一个(0, 10000)区间内的正整数N。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;输出格式&lt;/h3&gt;

&lt;p&gt;如果N的4位数字全相等，则在一行内输出“N - N = 0000”；否则将计算的每一步在一行内输出，直到6174作为差出现，输出格式见样例。注意每个数字按4位数格式输出。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;输入样例1&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6767
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;输出样例1&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;输入样例2&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2222
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;输出样例2&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2222 - 2222 = 0000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;注意&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;时间限制： 100 ms
内存限制： 65536 kB
代码长度限制： 8000 B
判题程序： Standard
作者： CHEN, Yue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;题目分析&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;输入分类&lt;/p&gt;

    &lt;p&gt;输入分为两类，其一如样例1，四个数字不全相同。其二如样例2，四个数字全都相同。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第一类输入&lt;/p&gt;

    &lt;p&gt;注意输出的时候需要&lt;code class=&quot;highlighter-rouge&quot;&gt;补全&lt;/code&gt;4位数字，比如计算结果是&lt;code class=&quot;highlighter-rouge&quot;&gt;189&lt;/code&gt;，那么需要输出&lt;code class=&quot;highlighter-rouge&quot;&gt;0189&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;灵活运用&lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;atoi()&lt;/code&gt;可以方便地进行【数字】和【字符串】之间的转换。若是用C++，则可以借助&lt;code class=&quot;highlighter-rouge&quot;&gt;stringstream&lt;/code&gt;类作为过渡。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二类输入&lt;/p&gt;

    &lt;p&gt;直接输出&lt;code class=&quot;highlighter-rouge&quot;&gt;N - N = 0000&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-8&quot;&gt;部分测试用例&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;test1&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
6767

输出
7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
2222

输出
2222 - 2222 = 0000
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test3&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
1

输出
1000 - 0001 = 0999
9990 - 0999 = 8991
9981 - 1899 = 8082
8820 - 0288 = 8532
8532 - 2358 = 6174
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/27/PAT_Basic_1019.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/27/PAT_Basic_1019.html</guid>
        
        
      </item>
    
      <item>
        <title>PAT Basic 1017</title>
        <description>&lt;p&gt;本题代码可以参考&lt;a href=&quot;https://github.com/jJayyyyyyy/cs/tree/master/OJ/PAT/basic_level/1017_A%E9%99%A4%E4%BB%A5B&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpswwwpatestcncontestspat-b-practise1017-1017-ab-20&quot;&gt;&lt;a href=&quot;https://www.patest.cn/contests/pat-b-practise/1017&quot;&gt;原题&lt;/a&gt;： 1017. A除以B (20)&lt;/h2&gt;

&lt;p&gt;本题要求计算A/B，其中A是不超过1000位的正整数，B是1位正整数。&lt;br /&gt;
你需要输出商数Q和余数R，使得A = B * Q + R成立。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;输入格式&lt;/h3&gt;

&lt;p&gt;输入在1行中依次给出A和B，中间以1空格分隔。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;输出格式&lt;/h3&gt;

&lt;p&gt;在1行中依次输出Q和R，中间以1空格分隔。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;输入样例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;123456789050987654321 7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;输出样例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;17636684150141093474 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;注意&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;时间限制： 100 ms
内存限制： 65536 kB
代码长度限制： 8000 B
判题程序： Standard
作者： CHEN, Yue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;题目分析&lt;/h1&gt;

&lt;p&gt;把草稿纸上的除法算法抽象成为程序语言。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;输入&lt;/p&gt;

    &lt;p&gt;输入的A和B作为字符串处理。&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//用unsigned 避免溢出
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;取余&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// int a=0, b=0, q=0, r=0, i=0, j=0;//注意初始化为零
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//r是被除数的高位余数
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;						&lt;span class=&quot;c1&quot;&gt;//a是被除数,b是除数,q是商
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;						&lt;span class=&quot;c1&quot;&gt;//r是余数
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ans_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;//在数组中保存商
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ans_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;					&lt;span class=&quot;c1&quot;&gt;//字符数组结束标志
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输出&lt;/p&gt;

    &lt;p&gt;商的位数小于等于被除数的位数。本题算法可能导致&lt;code class=&quot;highlighter-rouge&quot;&gt;ans_q&lt;/code&gt;的最高位为0，因此需要对其进行判断与处理，以符合输出要求。&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//被除数与商，位数相同
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//位数不同，从下标1开始打印
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;可以根据下面的测试用例，观察对比直接打印的区别&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-6&quot;&gt;部分测试用例&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;test1&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
123456789050987654321 7

输出
17636684150141093474 3
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
20 2

输出
10 0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test3&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
25 2

输出
12 1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test3&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
13 6

输出	
2 1
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-7&quot;&gt;其他参考&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;cpp对于string s，也可以用cout«&amp;amp;s[1]，从第二个元素开始输出。需要的是地址，把s当作指针。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/19/PAT_Basic_1017.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/19/PAT_Basic_1017.html</guid>
        
        
      </item>
    
      <item>
        <title>PAT Basic 1016</title>
        <description>&lt;p&gt;本题代码可以参考&lt;a href=&quot;https://github.com/jJayyyyyyy/cs/tree/master/OJ/PAT/basic_level/1016_%E9%83%A8%E5%88%86A%2BB&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpswwwpatestcncontestspat-b-practise1016-1016-ab-15&quot;&gt;&lt;a href=&quot;https://www.patest.cn/contests/pat-b-practise/1016&quot;&gt;原题&lt;/a&gt;： 1016. 部分A+B (15)&lt;/h2&gt;

&lt;p&gt;正整数A的“D&lt;sub&gt;A&lt;/sub&gt;（为1位整数）部分”定义为由A中所有D&lt;sub&gt;A&lt;/sub&gt;组成的新整数P&lt;sub&gt;A&lt;/sub&gt;。例如：给定A = 3862767，D&lt;sub&gt;A&lt;/sub&gt; = 6，则A的“6部分”P&lt;sub&gt;A&lt;/sub&gt;是66，因为A中有2个6。&lt;/p&gt;

&lt;p&gt;现给定A、D&lt;sub&gt;A&lt;/sub&gt;、B、D&lt;sub&gt;B&lt;/sub&gt;，请编写程序计算P&lt;sub&gt;A&lt;/sub&gt; + P&lt;sub&gt;B&lt;/sub&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;输入格式&lt;/h3&gt;

&lt;p&gt;输入在一行中依次给出A、D&lt;sub&gt;A&lt;/sub&gt;、B、D&lt;sub&gt;B&lt;/sub&gt;，中间以空格分隔，其中0 &amp;lt; A, B &amp;lt; 10&lt;sup&gt;10&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;输出格式&lt;/h3&gt;

&lt;p&gt;在一行中输出P&lt;sub&gt;A&lt;/sub&gt; + P&lt;sub&gt;B&lt;/sub&gt;的值。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;输入样例1&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3862767 6 13530293 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;输出样例1&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;399
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;输入样例2&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3862767 1 13530293 8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;输出样例2&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;注意&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;时间限制： 100 ms
内存限制： 65536 kB
代码长度限制： 8000 B
判题程序： Standard
作者： CHEN, Yue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;题目分析&lt;/h1&gt;

&lt;p&gt;先把所有内容当做字符串处理。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Python&lt;/p&gt;

    &lt;p&gt;利用&lt;code class=&quot;highlighter-rouge&quot;&gt;.count()&lt;/code&gt;方法统计出D&lt;sub&gt;A&lt;/sub&gt;出现的次数cnt。&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cnt_Da&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Da&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;再用&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;直接拼接n次，得到P&lt;sub&gt;A&lt;/sub&gt;，并用&lt;code class=&quot;highlighter-rouge&quot;&gt;int()&lt;/code&gt;将其转为整数。注意cnt为0的情况。&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt_Da&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Pa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Da&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt_Da&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Pa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;对B作相同处理，然后两者相加即可。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;C++&lt;/p&gt;

    &lt;p&gt;引入&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/code&gt;，即可得到&lt;code class=&quot;highlighter-rouge&quot;&gt;std::count()&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;//注意a的类型
//...
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cnt_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;接着根据D&lt;sub&gt;A&lt;/sub&gt;和cnt_a计算P&lt;sub&gt;A&lt;/sub&gt;即可。注意cnt_a为0的情况。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-8&quot;&gt;部分测试用例&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;test1&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
3862767 6 13530293 3

输出
399
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
3862767 1 13530293 8

输出
0
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-9&quot;&gt;其他参考&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/profile/2974017/codeBookDetail?submissionId=8275686&quot;&gt;NobodyKnow提交的代码&lt;/a&gt;&lt;/p&gt;

    &lt;!-- str.count() --&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.count&quot;&gt;python-docs&lt;/a&gt;&lt;/p&gt;

    &lt;!-- str.count() --&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3867890/count-character-occurrences-in-a-string&quot;&gt;std::count(), count string&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.cplusplus.com/reference/algorithm/count/&quot;&gt;std::count() can also count int&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/19/PAT_Basic_1016.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/19/PAT_Basic_1016.html</guid>
        
        
      </item>
    
      <item>
        <title>PAT Basic 1015</title>
        <description>&lt;p&gt;本题代码可以参考&lt;a href=&quot;https://github.com/jJayyyyyyy/cs/tree/master/OJ/PAT/basic_level/1015_%E5%BE%B7%E6%89%8D%E8%AE%BA&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpswwwpatestcncontestspat-b-practise1015-1015--25&quot;&gt;&lt;a href=&quot;https://www.patest.cn/contests/pat-b-practise/1015&quot;&gt;原题&lt;/a&gt;： 1015. 德才论 (25)&lt;/h2&gt;

&lt;p&gt;宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”&lt;/p&gt;

&lt;p&gt;现给出一批考生的德才分数，请根据司马光的理论给出录取排名。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;输入格式&lt;/h3&gt;

&lt;p&gt;输入第1行给出3个正整数，分别为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;N（&amp;lt;=10^5），即考生总数；&lt;/li&gt;
  &lt;li&gt;L（&amp;gt;=60），为录取最低分数线，即德分和才分均不低于L的考生才有资格被考虑录取；&lt;/li&gt;
  &lt;li&gt;H（&amp;lt;100），为优先录取线。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;考生排名规则如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;德分和才分均不低于H的被定义为“才德全尽”，此类考生按德才总分从高到低排序；&lt;/li&gt;
  &lt;li&gt;才分不到H但德分到H线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；&lt;/li&gt;
  &lt;li&gt;德才分均低于H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；&lt;/li&gt;
  &lt;li&gt;其他达到最低线L的考生也按总分排序，但排在第三类考生之后。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;随后N行，每行给出一位考生的信息，包括：准考证号、德分、才分，其中准考证号为8位整数，德才分为区间[0, 100]内的整数。数字间以空格分隔。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;输出格式&lt;/h3&gt;

&lt;p&gt;输出第1行首先给出达到最低分数线的考生人数M，随后M行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。&lt;/p&gt;

&lt;p&gt;当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;输入样例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;14 60 80
10000001 64 90
10000002 90 60
10000011 85 80
10000003 85 80
10000004 80 85
10000005 82 77
10000006 83 76
10000007 90 78
10000008 75 79
10000009 59 90
10000010 88 45
10000012 80 100
10000013 90 99
10000014 66 60
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;输出样例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;12
10000013 90 99
10000012 80 100
10000003 85 80
10000011 85 80
10000004 80 85
10000007 90 78
10000006 83 76
10000005 82 77
10000002 90 60
10000014 66 60
10000008 75 79
10000001 64 90
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;注意&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;时间限制： 200 ms
内存限制： 65536 kB
代码长度限制： 8000 B
判题程序： Standard
作者： CHEN, Li
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-5&quot;&gt;题目分析&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;理解题意，拆分题目&lt;/code&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;确定存储结构&lt;/li&gt;
      &lt;li&gt;首先获取合格考生(德和才都&amp;gt;=L)&lt;/li&gt;
      &lt;li&gt;考生分类&lt;/li&gt;
      &lt;li&gt;确定排序规则cmp()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;存储结构&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;另外可再设临时变量&lt;code class=&quot;highlighter-rouge&quot;&gt;int id, moral, talent, sum;&lt;/code&gt;让代码更加清晰简洁。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;获取合格考生&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;为了减少重复循环，我们在第一次输入的时候就进行分配，将考生成绩分为&lt;code class=&quot;highlighter-rouge&quot;&gt;不合格&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Student *stu_a, *stu_b, *stu_c, *stu_d;&lt;/code&gt;，而不是第一遍循环先筛掉不合格的，另外再来一遍循环进行分类。&lt;/p&gt;

    &lt;p&gt;同时可以记录合格考生总数，及各类考生人数&lt;code class=&quot;highlighter-rouge&quot;&gt;int num_pass, num_a, num_b, num_c, num_d;&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;考虑到内存很充足，采取空间换时间的策略。每一类考生数量都在一开始就分配&lt;code class=&quot;highlighter-rouge&quot;&gt;us_num=N&lt;/code&gt;的空间，而不是每次输入的时候单独分配&lt;code class=&quot;highlighter-rouge&quot;&gt;size=1&lt;/code&gt;的空间，可以部分提高效率。&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stu_a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stu_b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stu_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stu_d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;us_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;注意最后要进行&lt;code class=&quot;highlighter-rouge&quot;&gt;free(stu_a);&lt;/code&gt;等操作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;考生分类&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;按照题目逻辑即可，最好在纸上用伪代码写下，比原题一坨文字要清晰，免得出错。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;排序&lt;/code&gt; &lt;b&gt;(非常重要)&lt;/b&gt;&lt;/p&gt;

    &lt;p&gt;C中提供了快排，不需要我们重复造轮子了，但是要掌握原型和接口。ANSI C的&lt;code class=&quot;highlighter-rouge&quot;&gt;qsort()&lt;/code&gt;原型如下：&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nmemb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;结合本题就是&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#inlcude &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;关键点1&lt;/code&gt;：&lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt;是一个指向函数的指针。在&lt;code class=&quot;highlighter-rouge&quot;&gt;C Primer Plus&lt;/code&gt;的例程中，如果按照升序排序，则可以这样&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//a1&amp;lt;a2 and a1排在a2前面
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;可以总结出如下规律：&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;升序&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;排在&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;之前&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;降序&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;排在&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;之后&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;关键点2&lt;/code&gt;：用于排序的&lt;code class=&quot;highlighter-rouge&quot;&gt;cmp()&lt;/code&gt;比较的是一个总体的权重。自己以前的思维固化了。。一开始是这么想的，第一遍先根据&lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;排序，然后以&lt;code class=&quot;highlighter-rouge&quot;&gt;moral&lt;/code&gt;进行第二遍排序，etc…然后导致逻辑混乱。&lt;/p&gt;

    &lt;p&gt;殊不知应该把&lt;code class=&quot;highlighter-rouge&quot;&gt;Student&lt;/code&gt;作为一个整体，其中的四项内容各有权重，应当根据加权之后的结果确定每一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Student&lt;/code&gt;的次序。结合题意可得&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;再参考&lt;a href=&quot;https://github.com/liuchuo/PAT/blob/master/PAT%E4%B9%99%E7%BA%A7(Basic%20Level)/1015.%20%E5%BE%B7%E6%89%8D%E8%AE%BA%20(25).cpp&quot;&gt;这里&lt;/a&gt;，我们就可以得到精简后的&lt;code class=&quot;highlighter-rouge&quot;&gt;cmp()&lt;/code&gt;如下&lt;/p&gt;

    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;h6&gt;PS：C++中的`sort()`和C中的`qsort()`有所区别，两者对`cmp()`的返回值的要求是相反的。更多内容可以参考&lt;a href=&quot;https://github.com/jJayyyyyyy/cs/tree/master/OJ/PAT/basic_level/1005_%E7%BB%A7%E7%BB%AD(3n%2B1)%E7%8C%9C%E6%83%B3&quot;&gt;1005 继续(3n+1)猜想&lt;/a&gt;&lt;/h6&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-6&quot;&gt;部分测试用例&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;test1&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5 60 60
10000001 10 10
10000002 40 60
10000011 85 80
10000003 85 50
10000013 85 70
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;14 60 80
10000001 64 90
10000002 90 60
10000011 85 80
10000003 85 80
10000004 80 85
10000005 82 77
10000006 83 76
10000007 90 78
10000008 75 79
10000009 59 90
10000010 88 45
10000012 80 100
10000013 90 99
10000014 66 60
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-7&quot;&gt;其他参考&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/li698753214/article/details/17450707&quot;&gt;结构体赋值&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;结构和数组在定义时赋值叫做初始化，能用一个{}整体赋值，而定义以后再想要赋值则只能一次给一个成员赋值，不能用{}。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python可以考虑用面向对象的方法，比用list+dict方便，效率和内存待考证。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jJayyyyyyy/cs/tree/master/OJ/PAT/basic_level/1005_%E7%BB%A7%E7%BB%AD(3n%2B1)%E7%8C%9C%E6%83%B3&quot;&gt;1005 继续(3n+1)猜想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/17/PAT_Basic_1015.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/17/PAT_Basic_1015.html</guid>
        
        
      </item>
    
      <item>
        <title>PAT Basic 1014</title>
        <description>&lt;p&gt;本题代码可以参考&lt;a href=&quot;https://github.com/jJayyyyyyy/cs/tree/master/OJ/PAT/basic_level/1014_%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF%E7%9A%84%E7%BA%A6%E4%BC%9A&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;httpswwwpatestcncontestspat-b-practise1014-1014--20&quot;&gt;&lt;a href=&quot;https://www.patest.cn/contests/pat-b-practise/1014&quot;&gt;原题&lt;/a&gt;： 1014. 福尔摩斯的约会 (20)&lt;/h2&gt;

&lt;p&gt;大侦探福尔摩斯接到一张奇怪的字条：“我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;amp;hgsfdk d&amp;amp;Hyscvnm”。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间“星期四 14:04”，因为前面两字符串中第1对相同的大写英文字母（大小写有区分）是第4个字母’D’，代表星期四；第2对相同的字符是’E’，那是第5个英文字母，代表一天里的第14个钟头（于是一天的0点到23点由数字0到9、以及大写字母A到N表示）；后面两字符串第1对相同的英文字母’s’出现在第4个位置（从0开始计数）上，代表第4分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;输入格式&lt;/h3&gt;

&lt;p&gt;输入在4行中分别给出4个非空、不包含空格、且长度不超过60的字符串。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;输出格式&lt;/h3&gt;

&lt;p&gt;在一行中输出约会的时间，格式为“DAY HH:MM”，其中“DAY”是某星期的3字符缩写，即MON表示星期一，TUE表示星期二，WED表示星期三，THU表示星期四，FRI表示星期五，SAT表示星期六，SUN表示星期日。题目输入保证每个测试存在唯一解。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;输入样例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3485djDkxh4hhGE 
2984akDfkkkkggEdsb 
s&amp;amp;hgsfdk 
d&amp;amp;Hyscvnm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;输出样例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;THU 14:04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;注意&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;时间限制： 100 ms
内存限制： 65536 kB
代码长度限制： 8000 B
判题程序： Standard
作者： CHEN, Yue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;题目分析&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;星期几&lt;/p&gt;

    &lt;p&gt;对比第一行和第二行，找到第一对【下标相同】的【大写】字母。&lt;/p&gt;

    &lt;p&gt;注意大写字母的范围在 &lt;code class=&quot;highlighter-rouge&quot;&gt;'A' ~ 'G'&lt;/code&gt; 之间，分别对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;星期一 ~ 星期日&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;同时记录此时的下标&lt;code class=&quot;highlighter-rouge&quot;&gt;ix&lt;/code&gt;，下一步寻找【钟头】应该从这个下标往后数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;钟头&lt;/p&gt;

    &lt;p&gt;基本与第1点相同，注意【大写】字母范围在 &lt;code class=&quot;highlighter-rouge&quot;&gt;'A' ~ 'N'&lt;/code&gt; 之间，分别对应 10点~23点。&lt;/p&gt;

    &lt;p&gt;还有一种情况，&lt;code class=&quot;highlighter-rouge&quot;&gt;ix&lt;/code&gt;之后第一对相同的字符是数字，这也是一种合法的情况， &lt;code class=&quot;highlighter-rouge&quot;&gt;'0' ~ '9'&lt;/code&gt;分别对应 &lt;code class=&quot;highlighter-rouge&quot;&gt;0点 ~ 9点&lt;/code&gt;。此时为了格式化输出，还要在前面加上字符&lt;code class=&quot;highlighter-rouge&quot;&gt;'0'&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;此外，钟头后面还要输出 冒号&lt;code class=&quot;highlighter-rouge&quot;&gt;':'&lt;/code&gt;，作为分隔符。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分钟&lt;/p&gt;

    &lt;p&gt;对比第三行和第四行，寻找第一对【下标相同】的【英文字符】，将其下标作为分钟。&lt;/p&gt;

    &lt;p&gt;注意分钟在 &lt;code class=&quot;highlighter-rouge&quot;&gt;0 ~ 9&lt;/code&gt; 时，需要在前面补&lt;code class=&quot;highlighter-rouge&quot;&gt;'0'&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-6&quot;&gt;部分测试用例&lt;/h2&gt;

&lt;p&gt;养成好的测试习惯&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;test1&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
3485djDkxh4hhGE 
2984akDfkkkkggEdsb 
s&amp;amp;hgsfdk 
d&amp;amp;Hyscvnm

输出
THU 14:04
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;test2&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入
3485djEkxh4hhGE 
2984akEfkkkkggEdsb 
s&amp;amp;hgsfdk 
d&amp;amp;Hyscvnm

输出
FRI 14:04
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;其他参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;字符处理函数&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;C&lt;/p&gt;

        &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;ctype.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isalnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isdigit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isalpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tolower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;C++&lt;/p&gt;

        &lt;p&gt;同C，将头文件换成&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cctype&amp;gt;&lt;/code&gt;即可&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Python&lt;/p&gt;

        &lt;p&gt;字符串的成员函数&lt;/p&gt;

        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdigit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isupper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(END)&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/16/PAT_Basic_1014.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/16/PAT_Basic_1014.html</guid>
        
        
      </item>
    
  </channel>
</rss>
